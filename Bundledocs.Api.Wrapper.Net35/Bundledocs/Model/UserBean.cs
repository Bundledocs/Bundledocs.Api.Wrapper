/* 
 * Bundledocs.Web.Api
 *
 * Bundledocs Web Api (v1)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Bundledocs.Model
{
    /// <summary>
    /// UserBean
    /// </summary>
    [DataContract]
    public partial class UserBean :  IEquatable<UserBean>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="UserBean" /> class.
        /// </summary>
        /// <param name="SessionKey">SessionKey.</param>
        /// <param name="Username">Username.</param>
        /// <param name="CookieKey">CookieKey.</param>
        /// <param name="Locale">Locale.</param>
        /// <param name="FirstName">FirstName.</param>
        /// <param name="LastName">LastName.</param>
        /// <param name="Email">Email.</param>
        /// <param name="PhoneNumber">PhoneNumber.</param>
        /// <param name="Address1">Address1.</param>
        /// <param name="Address2">Address2.</param>
        /// <param name="Address3">Address3.</param>
        /// <param name="Address4">Address4.</param>
        /// <param name="Company">Company.</param>
        /// <param name="Type">Type.</param>
        /// <param name="IsAdmin">IsAdmin.</param>
        /// <param name="Domain">Domain.</param>
        /// <param name="Briefs">Briefs.</param>
        /// <param name="BriefIndexTitleText">BriefIndexTitleText.</param>
        /// <param name="BriefDisplayDateFormat">BriefDisplayDateFormat.</param>
        /// <param name="BriefPageNumberFontType">BriefPageNumberFontType.</param>
        /// <param name="BriefPageNumberFontSize">BriefPageNumberFontSize.</param>
        /// <param name="IsSendEmailBrief
        /// d">IsSendEmailBriefGenerated.</param>
        /// <param name="IsUsingSourceFileDimensions">IsUsingSourceFileDimensions.</param>
        /// <param name="ClioDomainEndpoint">ClioDomainEndpoint.</param>
        /// <param name="NetDocumentsDomainEndpoint">NetDocumentsDomainEndpoint.</param>
        /// <param name="ForeignKey">ForeignKey.</param>
        /// <param name="Created">Created.</param>
        /// <param name="LastAccessedTimeStamp">LastAccessedTimeStamp.</param>
        /// <param name="PartitionKey">PartitionKey.</param>
        /// <param name="RowKey">RowKey.</param>
        /// <param name="Timestamp">Timestamp.</param>
        /// <param name="ETag">ETag.</param>
        public UserBean(string SessionKey = null, string Username = null, string CookieKey = null, string Locale = null, string FirstName = null, string LastName = null, string Email = null, string PhoneNumber = null, string Address1 = null, string Address2 = null, string Address3 = null, string Address4 = null, string Company = null, string Type = null, bool? IsAdmin = null, string Domain = null, List<Brief> Briefs = null, string BriefIndexTitleText = null, string BriefDisplayDateFormat = null, string BriefPageNumberFontType = null, string BriefPageNumberFontSize = null, bool? IsSendEmailBriefGenerated = null, bool? IsUsingSourceFileDimensions = null, string ClioDomainEndpoint = null, string NetDocumentsDomainEndpoint = null, string ForeignKey = null, DateTime? Created = null, DateTime? LastAccessedTimeStamp = null, string PartitionKey = null, string RowKey = null, DateTime? Timestamp = null, string ETag = null)
        {
            this.SessionKey = SessionKey;
            this.Username = Username;
            this.CookieKey = CookieKey;
            this.Locale = Locale;
            this.FirstName = FirstName;
            this.LastName = LastName;
            this.Email = Email;
            this.PhoneNumber = PhoneNumber;
            this.Address1 = Address1;
            this.Address2 = Address2;
            this.Address3 = Address3;
            this.Address4 = Address4;
            this.Company = Company;
            this.Type = Type;
            this.IsAdmin = IsAdmin;
            this.Domain = Domain;
            this.Briefs = Briefs;
            this.BriefIndexTitleText = BriefIndexTitleText;
            this.BriefDisplayDateFormat = BriefDisplayDateFormat;
            this.BriefPageNumberFontType = BriefPageNumberFontType;
            this.BriefPageNumberFontSize = BriefPageNumberFontSize;
            this.IsSendEmailBriefGenerated = IsSendEmailBriefGenerated;
            this.IsUsingSourceFileDimensions = IsUsingSourceFileDimensions;
            this.ClioDomainEndpoint = ClioDomainEndpoint;
            this.NetDocumentsDomainEndpoint = NetDocumentsDomainEndpoint;
            this.ForeignKey = ForeignKey;
            this.Created = Created;
            this.LastAccessedTimeStamp = LastAccessedTimeStamp;
            this.PartitionKey = PartitionKey;
            this.RowKey = RowKey;
            this.Timestamp = Timestamp;
            this.ETag = ETag;
        }
        
        /// <summary>
        /// Gets or Sets SessionKey
        /// </summary>
        [DataMember(Name="SessionKey", EmitDefaultValue=false)]
        public string SessionKey { get; set; }
        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="Username", EmitDefaultValue=false)]
        public string Username { get; set; }
        /// <summary>
        /// Gets or Sets CookieKey
        /// </summary>
        [DataMember(Name="CookieKey", EmitDefaultValue=false)]
        public string CookieKey { get; set; }
        /// <summary>
        /// Gets or Sets Locale
        /// </summary>
        [DataMember(Name="Locale", EmitDefaultValue=false)]
        public string Locale { get; set; }
        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [DataMember(Name="FirstName", EmitDefaultValue=false)]
        public string FirstName { get; set; }
        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [DataMember(Name="LastName", EmitDefaultValue=false)]
        public string LastName { get; set; }
        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }
        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name="PhoneNumber", EmitDefaultValue=false)]
        public string PhoneNumber { get; set; }
        /// <summary>
        /// Gets or Sets Address1
        /// </summary>
        [DataMember(Name="Address1", EmitDefaultValue=false)]
        public string Address1 { get; set; }
        /// <summary>
        /// Gets or Sets Address2
        /// </summary>
        [DataMember(Name="Address2", EmitDefaultValue=false)]
        public string Address2 { get; set; }
        /// <summary>
        /// Gets or Sets Address3
        /// </summary>
        [DataMember(Name="Address3", EmitDefaultValue=false)]
        public string Address3 { get; set; }
        /// <summary>
        /// Gets or Sets Address4
        /// </summary>
        [DataMember(Name="Address4", EmitDefaultValue=false)]
        public string Address4 { get; set; }
        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name="Company", EmitDefaultValue=false)]
        public string Company { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public string Type { get; set; }
        /// <summary>
        /// Gets or Sets IsAdmin
        /// </summary>
        [DataMember(Name="IsAdmin", EmitDefaultValue=false)]
        public bool? IsAdmin { get; set; }
        /// <summary>
        /// Gets or Sets Domain
        /// </summary>
        [DataMember(Name="Domain", EmitDefaultValue=false)]
        public string Domain { get; set; }
        /// <summary>
        /// Gets or Sets Briefs
        /// </summary>
        [DataMember(Name="Briefs", EmitDefaultValue=false)]
        public List<Brief> Briefs { get; set; }
        /// <summary>
        /// Gets or Sets BriefIndexTitleText
        /// </summary>
        [DataMember(Name="BriefIndexTitleText", EmitDefaultValue=false)]
        public string BriefIndexTitleText { get; set; }
        /// <summary>
        /// Gets or Sets BriefDisplayDateFormat
        /// </summary>
        [DataMember(Name="BriefDisplayDateFormat", EmitDefaultValue=false)]
        public string BriefDisplayDateFormat { get; set; }
        /// <summary>
        /// Gets or Sets BriefPageNumberFontType
        /// </summary>
        [DataMember(Name="BriefPageNumberFontType", EmitDefaultValue=false)]
        public string BriefPageNumberFontType { get; set; }
        /// <summary>
        /// Gets or Sets BriefPageNumberFontSize
        /// </summary>
        [DataMember(Name="BriefPageNumberFontSize", EmitDefaultValue=false)]
        public string BriefPageNumberFontSize { get; set; }
        /// <summary>
        /// Gets or Sets IsSendEmailBriefGenerated
        /// </summary>
        [DataMember(Name="IsSendEmailBriefGenerated", EmitDefaultValue=false)]
        public bool? IsSendEmailBriefGenerated { get; set; }
        /// <summary>
        /// Gets or Sets IsUsingSourceFileDimensions
        /// </summary>
        [DataMember(Name="IsUsingSourceFileDimensions", EmitDefaultValue=false)]
        public bool? IsUsingSourceFileDimensions { get; set; }
        /// <summary>
        /// Gets or Sets ClioDomainEndpoint
        /// </summary>
        [DataMember(Name="ClioDomainEndpoint", EmitDefaultValue=false)]
        public string ClioDomainEndpoint { get; set; }
        /// <summary>
        /// Gets or Sets NetDocumentsDomainEndpoint
        /// </summary>
        [DataMember(Name="NetDocumentsDomainEndpoint", EmitDefaultValue=false)]
        public string NetDocumentsDomainEndpoint { get; set; }
        /// <summary>
        /// Gets or Sets ForeignKey
        /// </summary>
        [DataMember(Name="ForeignKey", EmitDefaultValue=false)]
        public string ForeignKey { get; set; }
        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="Created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }
        /// <summary>
        /// Gets or Sets LastAccessedTimeStamp
        /// </summary>
        [DataMember(Name="LastAccessedTimeStamp", EmitDefaultValue=false)]
        public DateTime? LastAccessedTimeStamp { get; set; }
        /// <summary>
        /// Gets or Sets PartitionKey
        /// </summary>
        [DataMember(Name="PartitionKey", EmitDefaultValue=false)]
        public string PartitionKey { get; set; }
        /// <summary>
        /// Gets or Sets RowKey
        /// </summary>
        [DataMember(Name="RowKey", EmitDefaultValue=false)]
        public string RowKey { get; set; }
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="Timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }
        /// <summary>
        /// Gets or Sets ETag
        /// </summary>
        [DataMember(Name="ETag", EmitDefaultValue=false)]
        public string ETag { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserBean {\n");
            sb.Append("  SessionKey: ").Append(SessionKey).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  CookieKey: ").Append(CookieKey).Append("\n");
            sb.Append("  Locale: ").Append(Locale).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Address1: ").Append(Address1).Append("\n");
            sb.Append("  Address2: ").Append(Address2).Append("\n");
            sb.Append("  Address3: ").Append(Address3).Append("\n");
            sb.Append("  Address4: ").Append(Address4).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  IsAdmin: ").Append(IsAdmin).Append("\n");
            sb.Append("  Domain: ").Append(Domain).Append("\n");
            sb.Append("  Briefs: ").Append(Briefs).Append("\n");
            sb.Append("  BriefIndexTitleText: ").Append(BriefIndexTitleText).Append("\n");
            sb.Append("  BriefDisplayDateFormat: ").Append(BriefDisplayDateFormat).Append("\n");
            sb.Append("  BriefPageNumberFontType: ").Append(BriefPageNumberFontType).Append("\n");
            sb.Append("  BriefPageNumberFontSize: ").Append(BriefPageNumberFontSize).Append("\n");
            sb.Append("  IsSendEmailBriefGenerated: ").Append(IsSendEmailBriefGenerated).Append("\n");
            sb.Append("  IsUsingSourceFileDimensions: ").Append(IsUsingSourceFileDimensions).Append("\n");
            sb.Append("  ClioDomainEndpoint: ").Append(ClioDomainEndpoint).Append("\n");
            sb.Append("  NetDocumentsDomainEndpoint: ").Append(NetDocumentsDomainEndpoint).Append("\n");
            sb.Append("  ForeignKey: ").Append(ForeignKey).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  LastAccessedTimeStamp: ").Append(LastAccessedTimeStamp).Append("\n");
            sb.Append("  PartitionKey: ").Append(PartitionKey).Append("\n");
            sb.Append("  RowKey: ").Append(RowKey).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  ETag: ").Append(ETag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as UserBean);
        }

        /// <summary>
        /// Returns true if UserBean instances are equal
        /// </summary>
        /// <param name="other">Instance of UserBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserBean other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SessionKey == other.SessionKey ||
                    this.SessionKey != null &&
                    this.SessionKey.Equals(other.SessionKey)
                ) && 
                (
                    this.Username == other.Username ||
                    this.Username != null &&
                    this.Username.Equals(other.Username)
                ) && 
                (
                    this.CookieKey == other.CookieKey ||
                    this.CookieKey != null &&
                    this.CookieKey.Equals(other.CookieKey)
                ) && 
                (
                    this.Locale == other.Locale ||
                    this.Locale != null &&
                    this.Locale.Equals(other.Locale)
                ) && 
                (
                    this.FirstName == other.FirstName ||
                    this.FirstName != null &&
                    this.FirstName.Equals(other.FirstName)
                ) && 
                (
                    this.LastName == other.LastName ||
                    this.LastName != null &&
                    this.LastName.Equals(other.LastName)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.PhoneNumber == other.PhoneNumber ||
                    this.PhoneNumber != null &&
                    this.PhoneNumber.Equals(other.PhoneNumber)
                ) && 
                (
                    this.Address1 == other.Address1 ||
                    this.Address1 != null &&
                    this.Address1.Equals(other.Address1)
                ) && 
                (
                    this.Address2 == other.Address2 ||
                    this.Address2 != null &&
                    this.Address2.Equals(other.Address2)
                ) && 
                (
                    this.Address3 == other.Address3 ||
                    this.Address3 != null &&
                    this.Address3.Equals(other.Address3)
                ) && 
                (
                    this.Address4 == other.Address4 ||
                    this.Address4 != null &&
                    this.Address4.Equals(other.Address4)
                ) && 
                (
                    this.Company == other.Company ||
                    this.Company != null &&
                    this.Company.Equals(other.Company)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.IsAdmin == other.IsAdmin ||
                    this.IsAdmin != null &&
                    this.IsAdmin.Equals(other.IsAdmin)
                ) && 
                (
                    this.Domain == other.Domain ||
                    this.Domain != null &&
                    this.Domain.Equals(other.Domain)
                ) && 
                (
                    this.Briefs == other.Briefs ||
                    this.Briefs != null &&
                    this.Briefs.SequenceEqual(other.Briefs)
                ) && 
                (
                    this.BriefIndexTitleText == other.BriefIndexTitleText ||
                    this.BriefIndexTitleText != null &&
                    this.BriefIndexTitleText.Equals(other.BriefIndexTitleText)
                ) && 
                (
                    this.BriefDisplayDateFormat == other.BriefDisplayDateFormat ||
                    this.BriefDisplayDateFormat != null &&
                    this.BriefDisplayDateFormat.Equals(other.BriefDisplayDateFormat)
                ) && 
                (
                    this.BriefPageNumberFontType == other.BriefPageNumberFontType ||
                    this.BriefPageNumberFontType != null &&
                    this.BriefPageNumberFontType.Equals(other.BriefPageNumberFontType)
                ) && 
                (
                    this.BriefPageNumberFontSize == other.BriefPageNumberFontSize ||
                    this.BriefPageNumberFontSize != null &&
                    this.BriefPageNumberFontSize.Equals(other.BriefPageNumberFontSize)
                ) && 
                (
                    this.IsSendEmailBriefGenerated == other.IsSendEmailBriefGenerated ||
                    this.IsSendEmailBriefGenerated != null &&
                    this.IsSendEmailBriefGenerated.Equals(other.IsSendEmailBriefGenerated)
                ) && 
                (
                    this.IsUsingSourceFileDimensions == other.IsUsingSourceFileDimensions ||
                    this.IsUsingSourceFileDimensions != null &&
                    this.IsUsingSourceFileDimensions.Equals(other.IsUsingSourceFileDimensions)
                ) && 
                (
                    this.ClioDomainEndpoint == other.ClioDomainEndpoint ||
                    this.ClioDomainEndpoint != null &&
                    this.ClioDomainEndpoint.Equals(other.ClioDomainEndpoint)
                ) && 
                (
                    this.NetDocumentsDomainEndpoint == other.NetDocumentsDomainEndpoint ||
                    this.NetDocumentsDomainEndpoint != null &&
                    this.NetDocumentsDomainEndpoint.Equals(other.NetDocumentsDomainEndpoint)
                ) && 
                (
                    this.ForeignKey == other.ForeignKey ||
                    this.ForeignKey != null &&
                    this.ForeignKey.Equals(other.ForeignKey)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.LastAccessedTimeStamp == other.LastAccessedTimeStamp ||
                    this.LastAccessedTimeStamp != null &&
                    this.LastAccessedTimeStamp.Equals(other.LastAccessedTimeStamp)
                ) && 
                (
                    this.PartitionKey == other.PartitionKey ||
                    this.PartitionKey != null &&
                    this.PartitionKey.Equals(other.PartitionKey)
                ) && 
                (
                    this.RowKey == other.RowKey ||
                    this.RowKey != null &&
                    this.RowKey.Equals(other.RowKey)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.ETag == other.ETag ||
                    this.ETag != null &&
                    this.ETag.Equals(other.ETag)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SessionKey != null)
                    hash = hash * 59 + this.SessionKey.GetHashCode();
                if (this.Username != null)
                    hash = hash * 59 + this.Username.GetHashCode();
                if (this.CookieKey != null)
                    hash = hash * 59 + this.CookieKey.GetHashCode();
                if (this.Locale != null)
                    hash = hash * 59 + this.Locale.GetHashCode();
                if (this.FirstName != null)
                    hash = hash * 59 + this.FirstName.GetHashCode();
                if (this.LastName != null)
                    hash = hash * 59 + this.LastName.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.PhoneNumber != null)
                    hash = hash * 59 + this.PhoneNumber.GetHashCode();
                if (this.Address1 != null)
                    hash = hash * 59 + this.Address1.GetHashCode();
                if (this.Address2 != null)
                    hash = hash * 59 + this.Address2.GetHashCode();
                if (this.Address3 != null)
                    hash = hash * 59 + this.Address3.GetHashCode();
                if (this.Address4 != null)
                    hash = hash * 59 + this.Address4.GetHashCode();
                if (this.Company != null)
                    hash = hash * 59 + this.Company.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.IsAdmin != null)
                    hash = hash * 59 + this.IsAdmin.GetHashCode();
                if (this.Domain != null)
                    hash = hash * 59 + this.Domain.GetHashCode();
                if (this.Briefs != null)
                    hash = hash * 59 + this.Briefs.GetHashCode();
                if (this.BriefIndexTitleText != null)
                    hash = hash * 59 + this.BriefIndexTitleText.GetHashCode();
                if (this.BriefDisplayDateFormat != null)
                    hash = hash * 59 + this.BriefDisplayDateFormat.GetHashCode();
                if (this.BriefPageNumberFontType != null)
                    hash = hash * 59 + this.BriefPageNumberFontType.GetHashCode();
                if (this.BriefPageNumberFontSize != null)
                    hash = hash * 59 + this.BriefPageNumberFontSize.GetHashCode();
                if (this.IsSendEmailBriefGenerated != null)
                    hash = hash * 59 + this.IsSendEmailBriefGenerated.GetHashCode();
                if (this.IsUsingSourceFileDimensions != null)
                    hash = hash * 59 + this.IsUsingSourceFileDimensions.GetHashCode();
                if (this.ClioDomainEndpoint != null)
                    hash = hash * 59 + this.ClioDomainEndpoint.GetHashCode();
                if (this.NetDocumentsDomainEndpoint != null)
                    hash = hash * 59 + this.NetDocumentsDomainEndpoint.GetHashCode();
                if (this.ForeignKey != null)
                    hash = hash * 59 + this.ForeignKey.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.LastAccessedTimeStamp != null)
                    hash = hash * 59 + this.LastAccessedTimeStamp.GetHashCode();
                if (this.PartitionKey != null)
                    hash = hash * 59 + this.PartitionKey.GetHashCode();
                if (this.RowKey != null)
                    hash = hash * 59 + this.RowKey.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.ETag != null)
                    hash = hash * 59 + this.ETag.GetHashCode();
                return hash;
            }
        }
    }

}
