/* 
 * Bundledocs.Web.Api
 *
 * Bundledocs Web Api (v1)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Bundledocs.Model
{
    /// <summary>
    /// Brief
    /// </summary>
    [DataContract]
    public partial class Brief :  IEquatable<Brief>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Brief" /> class.
        /// </summary>
        /// <param name="Code">Code.</param>
        /// <param name="Title">Title.</param>
        /// <param name="IsLocked">IsLocked.</param>
        /// <param name="IsHidden">IsHidden.</param>
        /// <param name="DateRegenerated">DateRegenerated.</param>
        /// <param name="IsBriefOpen">IsBriefOpen.</param>
        /// <param name="IsBriefPagesRemainingUnLocked">IsBriefPagesRemainingUnLocked.</param>
        /// <param name="IsSingleBookBrief">IsSingleBookBrief.</param>
        /// <param name="NumberOfPages">NumberOfPages.</param>
        /// <param name="BriefPagesRemaining">BriefPagesRemaining.</param>
        /// <param name="BriefSuperIndexPageCount">BriefSuperIndexPageCount.</param>
        /// <param name="IndexTitleText">IndexTitleText.</param>
        /// <param name="Description">Description.</param>
        /// <param name="PdfFilePath">PdfFilePath.</param>
        /// <param name="BriefDocumentDisplayDateFormat">BriefDocumentDisplayDateFormat.</param>
        /// <param name="IsSplitAndZip">IsSplitAndZip.</param>
        /// <param name="IsSectionTitlePagesIncluded">IsSectionTitlePagesIncluded.</param>
        /// <param name="IsSectionIndexPagesRemoved">IsSectionIndexPagesRemoved.</param>
        /// <param name="IsSuperIndexPagesRemoved">IsSuperIndexPagesRemoved.</param>
        /// <param name="IsSuperTitlePageRemoved">IsSuperTitlePageRemoved.</param>
        /// <param name="IsSectionIndexFontWeightNormal">IsSectionIndexFontWeightNormal.</param>
        /// <param name="IsDisplayOrderGlobalDocument">IsDisplayOrderGlobalDocument.</param>
        /// <param name="IsPageNumberingResetPerBook">IsPageNumberingResetPerBook.</param>
        /// <param name="IsPageNumberPrefixedWithSectionNumber">IsPageNumberPrefixedWithSectionNumber.</param>
        /// <param name="IsPageNumberPrintedOnIndexPages">IsPageNumberPrintedOnIndexPages.</param>
        /// <param name="IsPageNumberPrintedOnIndexPagesSeparate">IsPageNumberPrintedOnIndexPagesSeparate.</param>
        /// <param name="IsPageNumberSupressedOnDocuments">IsPageNumberSupressedOnDocuments.</param>
        /// <param name="IsPageNumberSupressedOnIndexPages">IsPageNumberSupressedOnIndexPages.</param>
        /// <param name="PageNumberPositionVertical">PageNumberPositionVertical.</param>
        /// <param name="PageNumberPositionHorizontal">PageNumberPositionHorizontal.</param>
        /// <param name="IsSectionNumberNumeric">IsSectionNumberNumeric.</param>
        /// <param name="IsDisplayOrderHiddenDocument">IsDisplayOrderHiddenDocument.</param>
        /// <param name="IsDisplayOrderHiddenSection">IsDisplayOrderHiddenSection.</param>
        /// <param name="IsBriefDocumentDisplayDateVisibleInTree">IsBriefDocumentDisplayDateVisibleInTree.</param>
        /// <param name="IsBriefDocumentDisplayDateVisibleInIndex">IsBriefDocumentDisplayDateVisibleInIndex.</param>
        /// <param name="IsBatesPageNumberIncluded">IsBatesPageNumberIncluded.</param>
        /// <param name="BatesPageNumberStart">BatesPageNumberStart.</param>
        /// <param name="BatesPageNumberLength">BatesPageNumberLength.</param>
        /// <param name="BatesPageNumberPrefix">BatesPageNumberPrefix.</param>
        /// <param name="BatesPageNumberSuffix">BatesPageNumberSuffix.</param>
        /// <param name="IsWatermarked">IsWatermarked.</param>
        /// <param name="WatermarkType">WatermarkType.</param>
        /// <param name="BriefDocuments">BriefDocuments.</param>
        /// <param name="BriefReceipts">BriefReceipts.</param>
        /// <param name="BriefShares">BriefShares.</param>
        /// <param name="MigrationInvitation">MigrationInvitation.</param>
        /// <param name="IsVisibleToGroups">IsVisibleToGroups.</param>
        /// <param name="AccessType">AccessType.</param>
        /// <param name="LastDownloadTimeStamp">LastDownloadTimeStamp.</param>
        /// <param name="ForeignKey">ForeignKey.</param>
        /// <param name="Created">Created.</param>
        /// <param name="LastAccessedTimeStamp">LastAccessedTimeStamp.</param>
        /// <param name="PartitionKey">PartitionKey.</param>
        /// <param name="RowKey">RowKey.</param>
        /// <param name="Timestamp">Timestamp.</param>
        /// <param name="ETag">ETag.</param>
        public Brief(string Code = null, string Title = null, bool? IsLocked = null, bool? IsHidden = null, DateTime? DateRegenerated = null, bool? IsBriefOpen = null, bool? IsBriefPagesRemainingUnLocked = null, bool? IsSingleBookBrief = null, int? NumberOfPages = null, int? BriefPagesRemaining = null, int? BriefSuperIndexPageCount = null, string IndexTitleText = null, string Description = null, string PdfFilePath = null, string BriefDocumentDisplayDateFormat = null, bool? IsSplitAndZip = null, bool? IsSectionTitlePagesIncluded = null, bool? IsSectionIndexPagesRemoved = null, bool? IsSuperIndexPagesRemoved = null, bool? IsSuperTitlePageRemoved = null, bool? IsSectionIndexFontWeightNormal = null, bool? IsDisplayOrderGlobalDocument = null, bool? IsPageNumberingResetPerBook = null, bool? IsPageNumberPrefixedWithSectionNumber = null, bool? IsPageNumberPrintedOnIndexPages = null, bool? IsPageNumberPrintedOnIndexPagesSeparate = null, bool? IsPageNumberSupressedOnDocuments = null, bool? IsPageNumberSupressedOnIndexPages = null, string PageNumberPositionVertical = null, string PageNumberPositionHorizontal = null, bool? IsSectionNumberNumeric = null, bool? IsDisplayOrderHiddenDocument = null, bool? IsDisplayOrderHiddenSection = null, bool? IsBriefDocumentDisplayDateVisibleInTree = null, bool? IsBriefDocumentDisplayDateVisibleInIndex = null, bool? IsBatesPageNumberIncluded = null, int? BatesPageNumberStart = null, int? BatesPageNumberLength = null, string BatesPageNumberPrefix = null, string BatesPageNumberSuffix = null, bool? IsWatermarked = null, string WatermarkType = null, List<BriefDocument> BriefDocuments = null, List<BriefReceipt> BriefReceipts = null, List<BriefShare> BriefShares = null, BriefMigrationInvitation MigrationInvitation = null, bool? IsVisibleToGroups = null, int? AccessType = null, DateTime? LastDownloadTimeStamp = null, string ForeignKey = null, DateTime? Created = null, DateTime? LastAccessedTimeStamp = null, string PartitionKey = null, string RowKey = null, DateTime? Timestamp = null, string ETag = null)
        {
            this.Code = Code;
            this.Title = Title;
            this.IsLocked = IsLocked;
            this.IsHidden = IsHidden;
            this.DateRegenerated = DateRegenerated;
            this.IsBriefOpen = IsBriefOpen;
            this.IsBriefPagesRemainingUnLocked = IsBriefPagesRemainingUnLocked;
            this.IsSingleBookBrief = IsSingleBookBrief;
            this.NumberOfPages = NumberOfPages;
            this.BriefPagesRemaining = BriefPagesRemaining;
            this.BriefSuperIndexPageCount = BriefSuperIndexPageCount;
            this.IndexTitleText = IndexTitleText;
            this.Description = Description;
            this.PdfFilePath = PdfFilePath;
            this.BriefDocumentDisplayDateFormat = BriefDocumentDisplayDateFormat;
            this.IsSplitAndZip = IsSplitAndZip;
            this.IsSectionTitlePagesIncluded = IsSectionTitlePagesIncluded;
            this.IsSectionIndexPagesRemoved = IsSectionIndexPagesRemoved;
            this.IsSuperIndexPagesRemoved = IsSuperIndexPagesRemoved;
            this.IsSuperTitlePageRemoved = IsSuperTitlePageRemoved;
            this.IsSectionIndexFontWeightNormal = IsSectionIndexFontWeightNormal;
            this.IsDisplayOrderGlobalDocument = IsDisplayOrderGlobalDocument;
            this.IsPageNumberingResetPerBook = IsPageNumberingResetPerBook;
            this.IsPageNumberPrefixedWithSectionNumber = IsPageNumberPrefixedWithSectionNumber;
            this.IsPageNumberPrintedOnIndexPages = IsPageNumberPrintedOnIndexPages;
            this.IsPageNumberPrintedOnIndexPagesSeparate = IsPageNumberPrintedOnIndexPagesSeparate;
            this.IsPageNumberSupressedOnDocuments = IsPageNumberSupressedOnDocuments;
            this.IsPageNumberSupressedOnIndexPages = IsPageNumberSupressedOnIndexPages;
            this.PageNumberPositionVertical = PageNumberPositionVertical;
            this.PageNumberPositionHorizontal = PageNumberPositionHorizontal;
            this.IsSectionNumberNumeric = IsSectionNumberNumeric;
            this.IsDisplayOrderHiddenDocument = IsDisplayOrderHiddenDocument;
            this.IsDisplayOrderHiddenSection = IsDisplayOrderHiddenSection;
            this.IsBriefDocumentDisplayDateVisibleInTree = IsBriefDocumentDisplayDateVisibleInTree;
            this.IsBriefDocumentDisplayDateVisibleInIndex = IsBriefDocumentDisplayDateVisibleInIndex;
            this.IsBatesPageNumberIncluded = IsBatesPageNumberIncluded;
            this.BatesPageNumberStart = BatesPageNumberStart;
            this.BatesPageNumberLength = BatesPageNumberLength;
            this.BatesPageNumberPrefix = BatesPageNumberPrefix;
            this.BatesPageNumberSuffix = BatesPageNumberSuffix;
            this.IsWatermarked = IsWatermarked;
            this.WatermarkType = WatermarkType;
            this.BriefDocuments = BriefDocuments;
            this.BriefReceipts = BriefReceipts;
            this.BriefShares = BriefShares;
            this.MigrationInvitation = MigrationInvitation;
            this.IsVisibleToGroups = IsVisibleToGroups;
            this.AccessType = AccessType;
            this.LastDownloadTimeStamp = LastDownloadTimeStamp;
            this.ForeignKey = ForeignKey;
            this.Created = Created;
            this.LastAccessedTimeStamp = LastAccessedTimeStamp;
            this.PartitionKey = PartitionKey;
            this.RowKey = RowKey;
            this.Timestamp = Timestamp;
            this.ETag = ETag;
        }
        
        /// <summary>
        /// Gets or Sets Code
        /// </summary>
        [DataMember(Name="Code", EmitDefaultValue=false)]
        public string Code { get; set; }
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="Title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// Gets or Sets IsLocked
        /// </summary>
        [DataMember(Name="IsLocked", EmitDefaultValue=false)]
        public bool? IsLocked { get; set; }
        /// <summary>
        /// Gets or Sets IsHidden
        /// </summary>
        [DataMember(Name="IsHidden", EmitDefaultValue=false)]
        public bool? IsHidden { get; set; }
        /// <summary>
        /// Gets or Sets DateRegenerated
        /// </summary>
        [DataMember(Name="DateRegenerated", EmitDefaultValue=false)]
        public DateTime? DateRegenerated { get; set; }
        /// <summary>
        /// Gets or Sets IsBriefOpen
        /// </summary>
        [DataMember(Name="IsBriefOpen", EmitDefaultValue=false)]
        public bool? IsBriefOpen { get; set; }
        /// <summary>
        /// Gets or Sets IsBriefPagesRemainingUnLocked
        /// </summary>
        [DataMember(Name="IsBriefPagesRemainingUnLocked", EmitDefaultValue=false)]
        public bool? IsBriefPagesRemainingUnLocked { get; set; }
        /// <summary>
        /// Gets or Sets IsSingleBookBrief
        /// </summary>
        [DataMember(Name="IsSingleBookBrief", EmitDefaultValue=false)]
        public bool? IsSingleBookBrief { get; set; }
        /// <summary>
        /// Gets or Sets NumberOfPages
        /// </summary>
        [DataMember(Name="NumberOfPages", EmitDefaultValue=false)]
        public int? NumberOfPages { get; set; }
        /// <summary>
        /// Gets or Sets BriefPagesRemaining
        /// </summary>
        [DataMember(Name="BriefPagesRemaining", EmitDefaultValue=false)]
        public int? BriefPagesRemaining { get; set; }
        /// <summary>
        /// Gets or Sets BriefSuperIndexPageCount
        /// </summary>
        [DataMember(Name="BriefSuperIndexPageCount", EmitDefaultValue=false)]
        public int? BriefSuperIndexPageCount { get; set; }
        /// <summary>
        /// Gets or Sets IndexTitleText
        /// </summary>
        [DataMember(Name="IndexTitleText", EmitDefaultValue=false)]
        public string IndexTitleText { get; set; }
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }
        /// <summary>
        /// Gets or Sets PdfFilePath
        /// </summary>
        [DataMember(Name="PdfFilePath", EmitDefaultValue=false)]
        public string PdfFilePath { get; set; }
        /// <summary>
        /// Gets or Sets BriefDocumentDisplayDateFormat
        /// </summary>
        [DataMember(Name="BriefDocumentDisplayDateFormat", EmitDefaultValue=false)]
        public string BriefDocumentDisplayDateFormat { get; set; }
        /// <summary>
        /// Gets or Sets IsSplitAndZip
        /// </summary>
        [DataMember(Name="IsSplitAndZip", EmitDefaultValue=false)]
        public bool? IsSplitAndZip { get; set; }
        /// <summary>
        /// Gets or Sets IsSectionTitlePagesIncluded
        /// </summary>
        [DataMember(Name="IsSectionTitlePagesIncluded", EmitDefaultValue=false)]
        public bool? IsSectionTitlePagesIncluded { get; set; }
        /// <summary>
        /// Gets or Sets IsSectionIndexPagesRemoved
        /// </summary>
        [DataMember(Name="IsSectionIndexPagesRemoved", EmitDefaultValue=false)]
        public bool? IsSectionIndexPagesRemoved { get; set; }
        /// <summary>
        /// Gets or Sets IsSuperIndexPagesRemoved
        /// </summary>
        [DataMember(Name="IsSuperIndexPagesRemoved", EmitDefaultValue=false)]
        public bool? IsSuperIndexPagesRemoved { get; set; }
        /// <summary>
        /// Gets or Sets IsSuperTitlePageRemoved
        /// </summary>
        [DataMember(Name="IsSuperTitlePageRemoved", EmitDefaultValue=false)]
        public bool? IsSuperTitlePageRemoved { get; set; }
        /// <summary>
        /// Gets or Sets IsSectionIndexFontWeightNormal
        /// </summary>
        [DataMember(Name="IsSectionIndexFontWeightNormal", EmitDefaultValue=false)]
        public bool? IsSectionIndexFontWeightNormal { get; set; }
        /// <summary>
        /// Gets or Sets IsDisplayOrderGlobalDocument
        /// </summary>
        [DataMember(Name="IsDisplayOrderGlobalDocument", EmitDefaultValue=false)]
        public bool? IsDisplayOrderGlobalDocument { get; set; }
        /// <summary>
        /// Gets or Sets IsPageNumberingResetPerBook
        /// </summary>
        [DataMember(Name="IsPageNumberingResetPerBook", EmitDefaultValue=false)]
        public bool? IsPageNumberingResetPerBook { get; set; }
        /// <summary>
        /// Gets or Sets IsPageNumberPrefixedWithSectionNumber
        /// </summary>
        [DataMember(Name="IsPageNumberPrefixedWithSectionNumber", EmitDefaultValue=false)]
        public bool? IsPageNumberPrefixedWithSectionNumber { get; set; }
        /// <summary>
        /// Gets or Sets IsPageNumberPrintedOnIndexPages
        /// </summary>
        [DataMember(Name="IsPageNumberPrintedOnIndexPages", EmitDefaultValue=false)]
        public bool? IsPageNumberPrintedOnIndexPages { get; set; }
        /// <summary>
        /// Gets or Sets IsPageNumberPrintedOnIndexPagesSeparate
        /// </summary>
        [DataMember(Name="IsPageNumberPrintedOnIndexPagesSeparate", EmitDefaultValue=false)]
        public bool? IsPageNumberPrintedOnIndexPagesSeparate { get; set; }
        /// <summary>
        /// Gets or Sets IsPageNumberSupressedOnDocuments
        /// </summary>
        [DataMember(Name="IsPageNumberSupressedOnDocuments", EmitDefaultValue=false)]
        public bool? IsPageNumberSupressedOnDocuments { get; set; }
        /// <summary>
        /// Gets or Sets IsPageNumberSupressedOnIndexPages
        /// </summary>
        [DataMember(Name="IsPageNumberSupressedOnIndexPages", EmitDefaultValue=false)]
        public bool? IsPageNumberSupressedOnIndexPages { get; set; }
        /// <summary>
        /// Gets or Sets PageNumberPositionVertical
        /// </summary>
        [DataMember(Name="PageNumberPositionVertical", EmitDefaultValue=false)]
        public string PageNumberPositionVertical { get; set; }
        /// <summary>
        /// Gets or Sets PageNumberPositionHorizontal
        /// </summary>
        [DataMember(Name="PageNumberPositionHorizontal", EmitDefaultValue=false)]
        public string PageNumberPositionHorizontal { get; set; }
        /// <summary>
        /// Gets or Sets IsSectionNumberNumeric
        /// </summary>
        [DataMember(Name="IsSectionNumberNumeric", EmitDefaultValue=false)]
        public bool? IsSectionNumberNumeric { get; set; }
        /// <summary>
        /// Gets or Sets IsDisplayOrderHiddenDocument
        /// </summary>
        [DataMember(Name="IsDisplayOrderHiddenDocument", EmitDefaultValue=false)]
        public bool? IsDisplayOrderHiddenDocument { get; set; }
        /// <summary>
        /// Gets or Sets IsDisplayOrderHiddenSection
        /// </summary>
        [DataMember(Name="IsDisplayOrderHiddenSection", EmitDefaultValue=false)]
        public bool? IsDisplayOrderHiddenSection { get; set; }
        /// <summary>
        /// Gets or Sets IsBriefDocumentDisplayDateVisibleInTree
        /// </summary>
        [DataMember(Name="IsBriefDocumentDisplayDateVisibleInTree", EmitDefaultValue=false)]
        public bool? IsBriefDocumentDisplayDateVisibleInTree { get; set; }
        /// <summary>
        /// Gets or Sets IsBriefDocumentDisplayDateVisibleInIndex
        /// </summary>
        [DataMember(Name="IsBriefDocumentDisplayDateVisibleInIndex", EmitDefaultValue=false)]
        public bool? IsBriefDocumentDisplayDateVisibleInIndex { get; set; }
        /// <summary>
        /// Gets or Sets IsBatesPageNumberIncluded
        /// </summary>
        [DataMember(Name="IsBatesPageNumberIncluded", EmitDefaultValue=false)]
        public bool? IsBatesPageNumberIncluded { get; set; }
        /// <summary>
        /// Gets or Sets BatesPageNumberStart
        /// </summary>
        [DataMember(Name="BatesPageNumberStart", EmitDefaultValue=false)]
        public int? BatesPageNumberStart { get; set; }
        /// <summary>
        /// Gets or Sets BatesPageNumberLength
        /// </summary>
        [DataMember(Name="BatesPageNumberLength", EmitDefaultValue=false)]
        public int? BatesPageNumberLength { get; set; }
        /// <summary>
        /// Gets or Sets BatesPageNumberPrefix
        /// </summary>
        [DataMember(Name="BatesPageNumberPrefix", EmitDefaultValue=false)]
        public string BatesPageNumberPrefix { get; set; }
        /// <summary>
        /// Gets or Sets BatesPageNumberSuffix
        /// </summary>
        [DataMember(Name="BatesPageNumberSuffix", EmitDefaultValue=false)]
        public string BatesPageNumberSuffix { get; set; }
        /// <summary>
        /// Gets or Sets IsWatermarked
        /// </summary>
        [DataMember(Name="IsWatermarked", EmitDefaultValue=false)]
        public bool? IsWatermarked { get; set; }
        /// <summary>
        /// Gets or Sets WatermarkType
        /// </summary>
        [DataMember(Name="WatermarkType", EmitDefaultValue=false)]
        public string WatermarkType { get; set; }
        /// <summary>
        /// Gets or Sets BriefDocuments
        /// </summary>
        [DataMember(Name="BriefDocuments", EmitDefaultValue=false)]
        public List<BriefDocument> BriefDocuments { get; set; }
        /// <summary>
        /// Gets or Sets BriefReceipts
        /// </summary>
        [DataMember(Name="BriefReceipts", EmitDefaultValue=false)]
        public List<BriefReceipt> BriefReceipts { get; set; }
        /// <summary>
        /// Gets or Sets BriefShares
        /// </summary>
        [DataMember(Name="BriefShares", EmitDefaultValue=false)]
        public List<BriefShare> BriefShares { get; set; }
        /// <summary>
        /// Gets or Sets MigrationInvitation
        /// </summary>
        [DataMember(Name="MigrationInvitation", EmitDefaultValue=false)]
        public BriefMigrationInvitation MigrationInvitation { get; set; }
        /// <summary>
        /// Gets or Sets IsVisibleToGroups
        /// </summary>
        [DataMember(Name="IsVisibleToGroups", EmitDefaultValue=false)]
        public bool? IsVisibleToGroups { get; set; }
        /// <summary>
        /// Gets or Sets AccessType
        /// </summary>
        [DataMember(Name="AccessType", EmitDefaultValue=false)]
        public int? AccessType { get; set; }
        /// <summary>
        /// Gets or Sets LastDownloadTimeStamp
        /// </summary>
        [DataMember(Name="LastDownloadTimeStamp", EmitDefaultValue=false)]
        public DateTime? LastDownloadTimeStamp { get; set; }
        /// <summary>
        /// Gets or Sets ForeignKey
        /// </summary>
        [DataMember(Name="ForeignKey", EmitDefaultValue=false)]
        public string ForeignKey { get; set; }
        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="Created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }
        /// <summary>
        /// Gets or Sets LastAccessedTimeStamp
        /// </summary>
        [DataMember(Name="LastAccessedTimeStamp", EmitDefaultValue=false)]
        public DateTime? LastAccessedTimeStamp { get; set; }
        /// <summary>
        /// Gets or Sets PartitionKey
        /// </summary>
        [DataMember(Name="PartitionKey", EmitDefaultValue=false)]
        public string PartitionKey { get; set; }
        /// <summary>
        /// Gets or Sets RowKey
        /// </summary>
        [DataMember(Name="RowKey", EmitDefaultValue=false)]
        public string RowKey { get; set; }
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="Timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }
        /// <summary>
        /// Gets or Sets ETag
        /// </summary>
        [DataMember(Name="ETag", EmitDefaultValue=false)]
        public string ETag { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Brief {\n");
            sb.Append("  Code: ").Append(Code).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  IsLocked: ").Append(IsLocked).Append("\n");
            sb.Append("  IsHidden: ").Append(IsHidden).Append("\n");
            sb.Append("  DateRegenerated: ").Append(DateRegenerated).Append("\n");
            sb.Append("  IsBriefOpen: ").Append(IsBriefOpen).Append("\n");
            sb.Append("  IsBriefPagesRemainingUnLocked: ").Append(IsBriefPagesRemainingUnLocked).Append("\n");
            sb.Append("  IsSingleBookBrief: ").Append(IsSingleBookBrief).Append("\n");
            sb.Append("  NumberOfPages: ").Append(NumberOfPages).Append("\n");
            sb.Append("  BriefPagesRemaining: ").Append(BriefPagesRemaining).Append("\n");
            sb.Append("  BriefSuperIndexPageCount: ").Append(BriefSuperIndexPageCount).Append("\n");
            sb.Append("  IndexTitleText: ").Append(IndexTitleText).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  PdfFilePath: ").Append(PdfFilePath).Append("\n");
            sb.Append("  BriefDocumentDisplayDateFormat: ").Append(BriefDocumentDisplayDateFormat).Append("\n");
            sb.Append("  IsSplitAndZip: ").Append(IsSplitAndZip).Append("\n");
            sb.Append("  IsSectionTitlePagesIncluded: ").Append(IsSectionTitlePagesIncluded).Append("\n");
            sb.Append("  IsSectionIndexPagesRemoved: ").Append(IsSectionIndexPagesRemoved).Append("\n");
            sb.Append("  IsSuperIndexPagesRemoved: ").Append(IsSuperIndexPagesRemoved).Append("\n");
            sb.Append("  IsSuperTitlePageRemoved: ").Append(IsSuperTitlePageRemoved).Append("\n");
            sb.Append("  IsSectionIndexFontWeightNormal: ").Append(IsSectionIndexFontWeightNormal).Append("\n");
            sb.Append("  IsDisplayOrderGlobalDocument: ").Append(IsDisplayOrderGlobalDocument).Append("\n");
            sb.Append("  IsPageNumberingResetPerBook: ").Append(IsPageNumberingResetPerBook).Append("\n");
            sb.Append("  IsPageNumberPrefixedWithSectionNumber: ").Append(IsPageNumberPrefixedWithSectionNumber).Append("\n");
            sb.Append("  IsPageNumberPrintedOnIndexPages: ").Append(IsPageNumberPrintedOnIndexPages).Append("\n");
            sb.Append("  IsPageNumberPrintedOnIndexPagesSeparate: ").Append(IsPageNumberPrintedOnIndexPagesSeparate).Append("\n");
            sb.Append("  IsPageNumberSupressedOnDocuments: ").Append(IsPageNumberSupressedOnDocuments).Append("\n");
            sb.Append("  IsPageNumberSupressedOnIndexPages: ").Append(IsPageNumberSupressedOnIndexPages).Append("\n");
            sb.Append("  PageNumberPositionVertical: ").Append(PageNumberPositionVertical).Append("\n");
            sb.Append("  PageNumberPositionHorizontal: ").Append(PageNumberPositionHorizontal).Append("\n");
            sb.Append("  IsSectionNumberNumeric: ").Append(IsSectionNumberNumeric).Append("\n");
            sb.Append("  IsDisplayOrderHiddenDocument: ").Append(IsDisplayOrderHiddenDocument).Append("\n");
            sb.Append("  IsDisplayOrderHiddenSection: ").Append(IsDisplayOrderHiddenSection).Append("\n");
            sb.Append("  IsBriefDocumentDisplayDateVisibleInTree: ").Append(IsBriefDocumentDisplayDateVisibleInTree).Append("\n");
            sb.Append("  IsBriefDocumentDisplayDateVisibleInIndex: ").Append(IsBriefDocumentDisplayDateVisibleInIndex).Append("\n");
            sb.Append("  IsBatesPageNumberIncluded: ").Append(IsBatesPageNumberIncluded).Append("\n");
            sb.Append("  BatesPageNumberStart: ").Append(BatesPageNumberStart).Append("\n");
            sb.Append("  BatesPageNumberLength: ").Append(BatesPageNumberLength).Append("\n");
            sb.Append("  BatesPageNumberPrefix: ").Append(BatesPageNumberPrefix).Append("\n");
            sb.Append("  BatesPageNumberSuffix: ").Append(BatesPageNumberSuffix).Append("\n");
            sb.Append("  IsWatermarked: ").Append(IsWatermarked).Append("\n");
            sb.Append("  WatermarkType: ").Append(WatermarkType).Append("\n");
            sb.Append("  BriefDocuments: ").Append(BriefDocuments).Append("\n");
            sb.Append("  BriefReceipts: ").Append(BriefReceipts).Append("\n");
            sb.Append("  BriefShares: ").Append(BriefShares).Append("\n");
            sb.Append("  MigrationInvitation: ").Append(MigrationInvitation).Append("\n");
            sb.Append("  IsVisibleToGroups: ").Append(IsVisibleToGroups).Append("\n");
            sb.Append("  AccessType: ").Append(AccessType).Append("\n");
            sb.Append("  LastDownloadTimeStamp: ").Append(LastDownloadTimeStamp).Append("\n");
            sb.Append("  ForeignKey: ").Append(ForeignKey).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  LastAccessedTimeStamp: ").Append(LastAccessedTimeStamp).Append("\n");
            sb.Append("  PartitionKey: ").Append(PartitionKey).Append("\n");
            sb.Append("  RowKey: ").Append(RowKey).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  ETag: ").Append(ETag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Brief);
        }

        /// <summary>
        /// Returns true if Brief instances are equal
        /// </summary>
        /// <param name="other">Instance of Brief to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Brief other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Code == other.Code ||
                    this.Code != null &&
                    this.Code.Equals(other.Code)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.IsLocked == other.IsLocked ||
                    this.IsLocked != null &&
                    this.IsLocked.Equals(other.IsLocked)
                ) && 
                (
                    this.IsHidden == other.IsHidden ||
                    this.IsHidden != null &&
                    this.IsHidden.Equals(other.IsHidden)
                ) && 
                (
                    this.DateRegenerated == other.DateRegenerated ||
                    this.DateRegenerated != null &&
                    this.DateRegenerated.Equals(other.DateRegenerated)
                ) && 
                (
                    this.IsBriefOpen == other.IsBriefOpen ||
                    this.IsBriefOpen != null &&
                    this.IsBriefOpen.Equals(other.IsBriefOpen)
                ) && 
                (
                    this.IsBriefPagesRemainingUnLocked == other.IsBriefPagesRemainingUnLocked ||
                    this.IsBriefPagesRemainingUnLocked != null &&
                    this.IsBriefPagesRemainingUnLocked.Equals(other.IsBriefPagesRemainingUnLocked)
                ) && 
                (
                    this.IsSingleBookBrief == other.IsSingleBookBrief ||
                    this.IsSingleBookBrief != null &&
                    this.IsSingleBookBrief.Equals(other.IsSingleBookBrief)
                ) && 
                (
                    this.NumberOfPages == other.NumberOfPages ||
                    this.NumberOfPages != null &&
                    this.NumberOfPages.Equals(other.NumberOfPages)
                ) && 
                (
                    this.BriefPagesRemaining == other.BriefPagesRemaining ||
                    this.BriefPagesRemaining != null &&
                    this.BriefPagesRemaining.Equals(other.BriefPagesRemaining)
                ) && 
                (
                    this.BriefSuperIndexPageCount == other.BriefSuperIndexPageCount ||
                    this.BriefSuperIndexPageCount != null &&
                    this.BriefSuperIndexPageCount.Equals(other.BriefSuperIndexPageCount)
                ) && 
                (
                    this.IndexTitleText == other.IndexTitleText ||
                    this.IndexTitleText != null &&
                    this.IndexTitleText.Equals(other.IndexTitleText)
                ) && 
                (
                    this.Description == other.Description ||
                    this.Description != null &&
                    this.Description.Equals(other.Description)
                ) && 
                (
                    this.PdfFilePath == other.PdfFilePath ||
                    this.PdfFilePath != null &&
                    this.PdfFilePath.Equals(other.PdfFilePath)
                ) && 
                (
                    this.BriefDocumentDisplayDateFormat == other.BriefDocumentDisplayDateFormat ||
                    this.BriefDocumentDisplayDateFormat != null &&
                    this.BriefDocumentDisplayDateFormat.Equals(other.BriefDocumentDisplayDateFormat)
                ) && 
                (
                    this.IsSplitAndZip == other.IsSplitAndZip ||
                    this.IsSplitAndZip != null &&
                    this.IsSplitAndZip.Equals(other.IsSplitAndZip)
                ) && 
                (
                    this.IsSectionTitlePagesIncluded == other.IsSectionTitlePagesIncluded ||
                    this.IsSectionTitlePagesIncluded != null &&
                    this.IsSectionTitlePagesIncluded.Equals(other.IsSectionTitlePagesIncluded)
                ) && 
                (
                    this.IsSectionIndexPagesRemoved == other.IsSectionIndexPagesRemoved ||
                    this.IsSectionIndexPagesRemoved != null &&
                    this.IsSectionIndexPagesRemoved.Equals(other.IsSectionIndexPagesRemoved)
                ) && 
                (
                    this.IsSuperIndexPagesRemoved == other.IsSuperIndexPagesRemoved ||
                    this.IsSuperIndexPagesRemoved != null &&
                    this.IsSuperIndexPagesRemoved.Equals(other.IsSuperIndexPagesRemoved)
                ) && 
                (
                    this.IsSuperTitlePageRemoved == other.IsSuperTitlePageRemoved ||
                    this.IsSuperTitlePageRemoved != null &&
                    this.IsSuperTitlePageRemoved.Equals(other.IsSuperTitlePageRemoved)
                ) && 
                (
                    this.IsSectionIndexFontWeightNormal == other.IsSectionIndexFontWeightNormal ||
                    this.IsSectionIndexFontWeightNormal != null &&
                    this.IsSectionIndexFontWeightNormal.Equals(other.IsSectionIndexFontWeightNormal)
                ) && 
                (
                    this.IsDisplayOrderGlobalDocument == other.IsDisplayOrderGlobalDocument ||
                    this.IsDisplayOrderGlobalDocument != null &&
                    this.IsDisplayOrderGlobalDocument.Equals(other.IsDisplayOrderGlobalDocument)
                ) && 
                (
                    this.IsPageNumberingResetPerBook == other.IsPageNumberingResetPerBook ||
                    this.IsPageNumberingResetPerBook != null &&
                    this.IsPageNumberingResetPerBook.Equals(other.IsPageNumberingResetPerBook)
                ) && 
                (
                    this.IsPageNumberPrefixedWithSectionNumber == other.IsPageNumberPrefixedWithSectionNumber ||
                    this.IsPageNumberPrefixedWithSectionNumber != null &&
                    this.IsPageNumberPrefixedWithSectionNumber.Equals(other.IsPageNumberPrefixedWithSectionNumber)
                ) && 
                (
                    this.IsPageNumberPrintedOnIndexPages == other.IsPageNumberPrintedOnIndexPages ||
                    this.IsPageNumberPrintedOnIndexPages != null &&
                    this.IsPageNumberPrintedOnIndexPages.Equals(other.IsPageNumberPrintedOnIndexPages)
                ) && 
                (
                    this.IsPageNumberPrintedOnIndexPagesSeparate == other.IsPageNumberPrintedOnIndexPagesSeparate ||
                    this.IsPageNumberPrintedOnIndexPagesSeparate != null &&
                    this.IsPageNumberPrintedOnIndexPagesSeparate.Equals(other.IsPageNumberPrintedOnIndexPagesSeparate)
                ) && 
                (
                    this.IsPageNumberSupressedOnDocuments == other.IsPageNumberSupressedOnDocuments ||
                    this.IsPageNumberSupressedOnDocuments != null &&
                    this.IsPageNumberSupressedOnDocuments.Equals(other.IsPageNumberSupressedOnDocuments)
                ) && 
                (
                    this.IsPageNumberSupressedOnIndexPages == other.IsPageNumberSupressedOnIndexPages ||
                    this.IsPageNumberSupressedOnIndexPages != null &&
                    this.IsPageNumberSupressedOnIndexPages.Equals(other.IsPageNumberSupressedOnIndexPages)
                ) && 
                (
                    this.PageNumberPositionVertical == other.PageNumberPositionVertical ||
                    this.PageNumberPositionVertical != null &&
                    this.PageNumberPositionVertical.Equals(other.PageNumberPositionVertical)
                ) && 
                (
                    this.PageNumberPositionHorizontal == other.PageNumberPositionHorizontal ||
                    this.PageNumberPositionHorizontal != null &&
                    this.PageNumberPositionHorizontal.Equals(other.PageNumberPositionHorizontal)
                ) && 
                (
                    this.IsSectionNumberNumeric == other.IsSectionNumberNumeric ||
                    this.IsSectionNumberNumeric != null &&
                    this.IsSectionNumberNumeric.Equals(other.IsSectionNumberNumeric)
                ) && 
                (
                    this.IsDisplayOrderHiddenDocument == other.IsDisplayOrderHiddenDocument ||
                    this.IsDisplayOrderHiddenDocument != null &&
                    this.IsDisplayOrderHiddenDocument.Equals(other.IsDisplayOrderHiddenDocument)
                ) && 
                (
                    this.IsDisplayOrderHiddenSection == other.IsDisplayOrderHiddenSection ||
                    this.IsDisplayOrderHiddenSection != null &&
                    this.IsDisplayOrderHiddenSection.Equals(other.IsDisplayOrderHiddenSection)
                ) && 
                (
                    this.IsBriefDocumentDisplayDateVisibleInTree == other.IsBriefDocumentDisplayDateVisibleInTree ||
                    this.IsBriefDocumentDisplayDateVisibleInTree != null &&
                    this.IsBriefDocumentDisplayDateVisibleInTree.Equals(other.IsBriefDocumentDisplayDateVisibleInTree)
                ) && 
                (
                    this.IsBriefDocumentDisplayDateVisibleInIndex == other.IsBriefDocumentDisplayDateVisibleInIndex ||
                    this.IsBriefDocumentDisplayDateVisibleInIndex != null &&
                    this.IsBriefDocumentDisplayDateVisibleInIndex.Equals(other.IsBriefDocumentDisplayDateVisibleInIndex)
                ) && 
                (
                    this.IsBatesPageNumberIncluded == other.IsBatesPageNumberIncluded ||
                    this.IsBatesPageNumberIncluded != null &&
                    this.IsBatesPageNumberIncluded.Equals(other.IsBatesPageNumberIncluded)
                ) && 
                (
                    this.BatesPageNumberStart == other.BatesPageNumberStart ||
                    this.BatesPageNumberStart != null &&
                    this.BatesPageNumberStart.Equals(other.BatesPageNumberStart)
                ) && 
                (
                    this.BatesPageNumberLength == other.BatesPageNumberLength ||
                    this.BatesPageNumberLength != null &&
                    this.BatesPageNumberLength.Equals(other.BatesPageNumberLength)
                ) && 
                (
                    this.BatesPageNumberPrefix == other.BatesPageNumberPrefix ||
                    this.BatesPageNumberPrefix != null &&
                    this.BatesPageNumberPrefix.Equals(other.BatesPageNumberPrefix)
                ) && 
                (
                    this.BatesPageNumberSuffix == other.BatesPageNumberSuffix ||
                    this.BatesPageNumberSuffix != null &&
                    this.BatesPageNumberSuffix.Equals(other.BatesPageNumberSuffix)
                ) && 
                (
                    this.IsWatermarked == other.IsWatermarked ||
                    this.IsWatermarked != null &&
                    this.IsWatermarked.Equals(other.IsWatermarked)
                ) && 
                (
                    this.WatermarkType == other.WatermarkType ||
                    this.WatermarkType != null &&
                    this.WatermarkType.Equals(other.WatermarkType)
                ) && 
                (
                    this.BriefDocuments == other.BriefDocuments ||
                    this.BriefDocuments != null &&
                    this.BriefDocuments.SequenceEqual(other.BriefDocuments)
                ) && 
                (
                    this.BriefReceipts == other.BriefReceipts ||
                    this.BriefReceipts != null &&
                    this.BriefReceipts.SequenceEqual(other.BriefReceipts)
                ) && 
                (
                    this.BriefShares == other.BriefShares ||
                    this.BriefShares != null &&
                    this.BriefShares.SequenceEqual(other.BriefShares)
                ) && 
                (
                    this.MigrationInvitation == other.MigrationInvitation ||
                    this.MigrationInvitation != null &&
                    this.MigrationInvitation.Equals(other.MigrationInvitation)
                ) && 
                (
                    this.IsVisibleToGroups == other.IsVisibleToGroups ||
                    this.IsVisibleToGroups != null &&
                    this.IsVisibleToGroups.Equals(other.IsVisibleToGroups)
                ) && 
                (
                    this.AccessType == other.AccessType ||
                    this.AccessType != null &&
                    this.AccessType.Equals(other.AccessType)
                ) && 
                (
                    this.LastDownloadTimeStamp == other.LastDownloadTimeStamp ||
                    this.LastDownloadTimeStamp != null &&
                    this.LastDownloadTimeStamp.Equals(other.LastDownloadTimeStamp)
                ) && 
                (
                    this.ForeignKey == other.ForeignKey ||
                    this.ForeignKey != null &&
                    this.ForeignKey.Equals(other.ForeignKey)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.LastAccessedTimeStamp == other.LastAccessedTimeStamp ||
                    this.LastAccessedTimeStamp != null &&
                    this.LastAccessedTimeStamp.Equals(other.LastAccessedTimeStamp)
                ) && 
                (
                    this.PartitionKey == other.PartitionKey ||
                    this.PartitionKey != null &&
                    this.PartitionKey.Equals(other.PartitionKey)
                ) && 
                (
                    this.RowKey == other.RowKey ||
                    this.RowKey != null &&
                    this.RowKey.Equals(other.RowKey)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.ETag == other.ETag ||
                    this.ETag != null &&
                    this.ETag.Equals(other.ETag)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Code != null)
                    hash = hash * 59 + this.Code.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.IsLocked != null)
                    hash = hash * 59 + this.IsLocked.GetHashCode();
                if (this.IsHidden != null)
                    hash = hash * 59 + this.IsHidden.GetHashCode();
                if (this.DateRegenerated != null)
                    hash = hash * 59 + this.DateRegenerated.GetHashCode();
                if (this.IsBriefOpen != null)
                    hash = hash * 59 + this.IsBriefOpen.GetHashCode();
                if (this.IsBriefPagesRemainingUnLocked != null)
                    hash = hash * 59 + this.IsBriefPagesRemainingUnLocked.GetHashCode();
                if (this.IsSingleBookBrief != null)
                    hash = hash * 59 + this.IsSingleBookBrief.GetHashCode();
                if (this.NumberOfPages != null)
                    hash = hash * 59 + this.NumberOfPages.GetHashCode();
                if (this.BriefPagesRemaining != null)
                    hash = hash * 59 + this.BriefPagesRemaining.GetHashCode();
                if (this.BriefSuperIndexPageCount != null)
                    hash = hash * 59 + this.BriefSuperIndexPageCount.GetHashCode();
                if (this.IndexTitleText != null)
                    hash = hash * 59 + this.IndexTitleText.GetHashCode();
                if (this.Description != null)
                    hash = hash * 59 + this.Description.GetHashCode();
                if (this.PdfFilePath != null)
                    hash = hash * 59 + this.PdfFilePath.GetHashCode();
                if (this.BriefDocumentDisplayDateFormat != null)
                    hash = hash * 59 + this.BriefDocumentDisplayDateFormat.GetHashCode();
                if (this.IsSplitAndZip != null)
                    hash = hash * 59 + this.IsSplitAndZip.GetHashCode();
                if (this.IsSectionTitlePagesIncluded != null)
                    hash = hash * 59 + this.IsSectionTitlePagesIncluded.GetHashCode();
                if (this.IsSectionIndexPagesRemoved != null)
                    hash = hash * 59 + this.IsSectionIndexPagesRemoved.GetHashCode();
                if (this.IsSuperIndexPagesRemoved != null)
                    hash = hash * 59 + this.IsSuperIndexPagesRemoved.GetHashCode();
                if (this.IsSuperTitlePageRemoved != null)
                    hash = hash * 59 + this.IsSuperTitlePageRemoved.GetHashCode();
                if (this.IsSectionIndexFontWeightNormal != null)
                    hash = hash * 59 + this.IsSectionIndexFontWeightNormal.GetHashCode();
                if (this.IsDisplayOrderGlobalDocument != null)
                    hash = hash * 59 + this.IsDisplayOrderGlobalDocument.GetHashCode();
                if (this.IsPageNumberingResetPerBook != null)
                    hash = hash * 59 + this.IsPageNumberingResetPerBook.GetHashCode();
                if (this.IsPageNumberPrefixedWithSectionNumber != null)
                    hash = hash * 59 + this.IsPageNumberPrefixedWithSectionNumber.GetHashCode();
                if (this.IsPageNumberPrintedOnIndexPages != null)
                    hash = hash * 59 + this.IsPageNumberPrintedOnIndexPages.GetHashCode();
                if (this.IsPageNumberPrintedOnIndexPagesSeparate != null)
                    hash = hash * 59 + this.IsPageNumberPrintedOnIndexPagesSeparate.GetHashCode();
                if (this.IsPageNumberSupressedOnDocuments != null)
                    hash = hash * 59 + this.IsPageNumberSupressedOnDocuments.GetHashCode();
                if (this.IsPageNumberSupressedOnIndexPages != null)
                    hash = hash * 59 + this.IsPageNumberSupressedOnIndexPages.GetHashCode();
                if (this.PageNumberPositionVertical != null)
                    hash = hash * 59 + this.PageNumberPositionVertical.GetHashCode();
                if (this.PageNumberPositionHorizontal != null)
                    hash = hash * 59 + this.PageNumberPositionHorizontal.GetHashCode();
                if (this.IsSectionNumberNumeric != null)
                    hash = hash * 59 + this.IsSectionNumberNumeric.GetHashCode();
                if (this.IsDisplayOrderHiddenDocument != null)
                    hash = hash * 59 + this.IsDisplayOrderHiddenDocument.GetHashCode();
                if (this.IsDisplayOrderHiddenSection != null)
                    hash = hash * 59 + this.IsDisplayOrderHiddenSection.GetHashCode();
                if (this.IsBriefDocumentDisplayDateVisibleInTree != null)
                    hash = hash * 59 + this.IsBriefDocumentDisplayDateVisibleInTree.GetHashCode();
                if (this.IsBriefDocumentDisplayDateVisibleInIndex != null)
                    hash = hash * 59 + this.IsBriefDocumentDisplayDateVisibleInIndex.GetHashCode();
                if (this.IsBatesPageNumberIncluded != null)
                    hash = hash * 59 + this.IsBatesPageNumberIncluded.GetHashCode();
                if (this.BatesPageNumberStart != null)
                    hash = hash * 59 + this.BatesPageNumberStart.GetHashCode();
                if (this.BatesPageNumberLength != null)
                    hash = hash * 59 + this.BatesPageNumberLength.GetHashCode();
                if (this.BatesPageNumberPrefix != null)
                    hash = hash * 59 + this.BatesPageNumberPrefix.GetHashCode();
                if (this.BatesPageNumberSuffix != null)
                    hash = hash * 59 + this.BatesPageNumberSuffix.GetHashCode();
                if (this.IsWatermarked != null)
                    hash = hash * 59 + this.IsWatermarked.GetHashCode();
                if (this.WatermarkType != null)
                    hash = hash * 59 + this.WatermarkType.GetHashCode();
                if (this.BriefDocuments != null)
                    hash = hash * 59 + this.BriefDocuments.GetHashCode();
                if (this.BriefReceipts != null)
                    hash = hash * 59 + this.BriefReceipts.GetHashCode();
                if (this.BriefShares != null)
                    hash = hash * 59 + this.BriefShares.GetHashCode();
                if (this.MigrationInvitation != null)
                    hash = hash * 59 + this.MigrationInvitation.GetHashCode();
                if (this.IsVisibleToGroups != null)
                    hash = hash * 59 + this.IsVisibleToGroups.GetHashCode();
                if (this.AccessType != null)
                    hash = hash * 59 + this.AccessType.GetHashCode();
                if (this.LastDownloadTimeStamp != null)
                    hash = hash * 59 + this.LastDownloadTimeStamp.GetHashCode();
                if (this.ForeignKey != null)
                    hash = hash * 59 + this.ForeignKey.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.LastAccessedTimeStamp != null)
                    hash = hash * 59 + this.LastAccessedTimeStamp.GetHashCode();
                if (this.PartitionKey != null)
                    hash = hash * 59 + this.PartitionKey.GetHashCode();
                if (this.RowKey != null)
                    hash = hash * 59 + this.RowKey.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.ETag != null)
                    hash = hash * 59 + this.ETag.GetHashCode();
                return hash;
            }
        }
    }

}
