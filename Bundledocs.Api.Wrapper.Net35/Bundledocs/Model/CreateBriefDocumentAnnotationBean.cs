/* 
 * Bundledocs.Web.Api
 *
 * Bundledocs Web Api (v1)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Bundledocs.Model
{
    /// <summary>
    /// CreateBriefDocumentAnnotationBean
    /// </summary>
    [DataContract]
    public partial class CreateBriefDocumentAnnotationBean :  IEquatable<CreateBriefDocumentAnnotationBean>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateBriefDocumentAnnotationBean" /> class.
        /// </summary>
        /// <param name="BriefDocumentPartitionKey">BriefDocumentPartitionKey.</param>
        /// <param name="BriefDocumentRowKey">BriefDocumentRowKey.</param>
        /// <param name="AnnotationType">AnnotationType.</param>
        /// <param name="ContentType">ContentType.</param>
        /// <param name="Title">Title.</param>
        /// <param name="Content">Content.</param>
        public CreateBriefDocumentAnnotationBean(string BriefDocumentPartitionKey = null, string BriefDocumentRowKey = null, int? AnnotationType = null, int? ContentType = null, string Title = null, string Content = null)
        {
            this.BriefDocumentPartitionKey = BriefDocumentPartitionKey;
            this.BriefDocumentRowKey = BriefDocumentRowKey;
            this.AnnotationType = AnnotationType;
            this.ContentType = ContentType;
            this.Title = Title;
            this.Content = Content;
        }
        
        /// <summary>
        /// Gets or Sets BriefDocumentPartitionKey
        /// </summary>
        [DataMember(Name="BriefDocumentPartitionKey", EmitDefaultValue=false)]
        public string BriefDocumentPartitionKey { get; set; }
        /// <summary>
        /// Gets or Sets BriefDocumentRowKey
        /// </summary>
        [DataMember(Name="BriefDocumentRowKey", EmitDefaultValue=false)]
        public string BriefDocumentRowKey { get; set; }
        /// <summary>
        /// Gets or Sets AnnotationType
        /// </summary>
        [DataMember(Name="AnnotationType", EmitDefaultValue=false)]
        public int? AnnotationType { get; set; }
        /// <summary>
        /// Gets or Sets ContentType
        /// </summary>
        [DataMember(Name="ContentType", EmitDefaultValue=false)]
        public int? ContentType { get; set; }
        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="Title", EmitDefaultValue=false)]
        public string Title { get; set; }
        /// <summary>
        /// Gets or Sets Content
        /// </summary>
        [DataMember(Name="Content", EmitDefaultValue=false)]
        public string Content { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateBriefDocumentAnnotationBean {\n");
            sb.Append("  BriefDocumentPartitionKey: ").Append(BriefDocumentPartitionKey).Append("\n");
            sb.Append("  BriefDocumentRowKey: ").Append(BriefDocumentRowKey).Append("\n");
            sb.Append("  AnnotationType: ").Append(AnnotationType).Append("\n");
            sb.Append("  ContentType: ").Append(ContentType).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Content: ").Append(Content).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as CreateBriefDocumentAnnotationBean);
        }

        /// <summary>
        /// Returns true if CreateBriefDocumentAnnotationBean instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateBriefDocumentAnnotationBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateBriefDocumentAnnotationBean other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.BriefDocumentPartitionKey == other.BriefDocumentPartitionKey ||
                    this.BriefDocumentPartitionKey != null &&
                    this.BriefDocumentPartitionKey.Equals(other.BriefDocumentPartitionKey)
                ) && 
                (
                    this.BriefDocumentRowKey == other.BriefDocumentRowKey ||
                    this.BriefDocumentRowKey != null &&
                    this.BriefDocumentRowKey.Equals(other.BriefDocumentRowKey)
                ) && 
                (
                    this.AnnotationType == other.AnnotationType ||
                    this.AnnotationType != null &&
                    this.AnnotationType.Equals(other.AnnotationType)
                ) && 
                (
                    this.ContentType == other.ContentType ||
                    this.ContentType != null &&
                    this.ContentType.Equals(other.ContentType)
                ) && 
                (
                    this.Title == other.Title ||
                    this.Title != null &&
                    this.Title.Equals(other.Title)
                ) && 
                (
                    this.Content == other.Content ||
                    this.Content != null &&
                    this.Content.Equals(other.Content)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.BriefDocumentPartitionKey != null)
                    hash = hash * 59 + this.BriefDocumentPartitionKey.GetHashCode();
                if (this.BriefDocumentRowKey != null)
                    hash = hash * 59 + this.BriefDocumentRowKey.GetHashCode();
                if (this.AnnotationType != null)
                    hash = hash * 59 + this.AnnotationType.GetHashCode();
                if (this.ContentType != null)
                    hash = hash * 59 + this.ContentType.GetHashCode();
                if (this.Title != null)
                    hash = hash * 59 + this.Title.GetHashCode();
                if (this.Content != null)
                    hash = hash * 59 + this.Content.GetHashCode();
                return hash;
            }
        }
    }

}
