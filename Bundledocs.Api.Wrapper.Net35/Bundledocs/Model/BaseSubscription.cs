/* 
 * Bundledocs.Web.Api
 *
 * Bundledocs Web Api (v1)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace Bundledocs.Model
{
    /// <summary>
    /// BaseSubscription
    /// </summary>
    [DataContract]
    public partial class BaseSubscription :  IEquatable<BaseSubscription>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseSubscription" /> class.
        /// </summary>
        /// <param name="RenewalDate">RenewalDate.</param>
        /// <param name="Status">Status.</param>
        /// <param name="BillingPeriod">BillingPeriod.</param>
        /// <param name="Type">Type.</param>
        /// <param name="RenewalFee">RenewalFee.</param>
        /// <param name="CaseLimit">CaseLimit.</param>
        /// <param name="DocumentLimit">DocumentLimit.</param>
        /// <param name="CurrencyCode">CurrencyCode.</param>
        /// <param name="IsExpirationWarningSent24Hour">IsExpirationWarningSent24Hour.</param>
        /// <param name="ForeignKey">ForeignKey.</param>
        /// <param name="Created">Created.</param>
        /// <param name="LastAccessedTimeStamp">LastAccessedTimeStamp.</param>
        /// <param name="PartitionKey">PartitionKey.</param>
        /// <param name="RowKey">RowKey.</param>
        /// <param name="Timestamp">Timestamp.</param>
        /// <param name="ETag">ETag.</param>
        public BaseSubscription(DateTime? RenewalDate = null, int? Status = null, int? BillingPeriod = null, int? Type = null, double? RenewalFee = null, int? CaseLimit = null, int? DocumentLimit = null, string CurrencyCode = null, bool? IsExpirationWarningSent24Hour = null, string ForeignKey = null, DateTime? Created = null, DateTime? LastAccessedTimeStamp = null, string PartitionKey = null, string RowKey = null, DateTime? Timestamp = null, string ETag = null)
        {
            this.RenewalDate = RenewalDate;
            this.Status = Status;
            this.BillingPeriod = BillingPeriod;
            this.Type = Type;
            this.RenewalFee = RenewalFee;
            this.CaseLimit = CaseLimit;
            this.DocumentLimit = DocumentLimit;
            this.CurrencyCode = CurrencyCode;
            this.IsExpirationWarningSent24Hour = IsExpirationWarningSent24Hour;
            this.ForeignKey = ForeignKey;
            this.Created = Created;
            this.LastAccessedTimeStamp = LastAccessedTimeStamp;
            this.PartitionKey = PartitionKey;
            this.RowKey = RowKey;
            this.Timestamp = Timestamp;
            this.ETag = ETag;
        }
        
        /// <summary>
        /// Gets or Sets RenewalDate
        /// </summary>
        [DataMember(Name="RenewalDate", EmitDefaultValue=false)]
        public DateTime? RenewalDate { get; set; }
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=false)]
        public int? Status { get; set; }
        /// <summary>
        /// Gets or Sets BillingPeriod
        /// </summary>
        [DataMember(Name="BillingPeriod", EmitDefaultValue=false)]
        public int? BillingPeriod { get; set; }
        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=false)]
        public int? Type { get; set; }
        /// <summary>
        /// Gets or Sets RenewalFee
        /// </summary>
        [DataMember(Name="RenewalFee", EmitDefaultValue=false)]
        public double? RenewalFee { get; set; }
        /// <summary>
        /// Gets or Sets CaseLimit
        /// </summary>
        [DataMember(Name="CaseLimit", EmitDefaultValue=false)]
        public int? CaseLimit { get; set; }
        /// <summary>
        /// Gets or Sets DocumentLimit
        /// </summary>
        [DataMember(Name="DocumentLimit", EmitDefaultValue=false)]
        public int? DocumentLimit { get; set; }
        /// <summary>
        /// Gets or Sets CurrencyCode
        /// </summary>
        [DataMember(Name="CurrencyCode", EmitDefaultValue=false)]
        public string CurrencyCode { get; set; }
        /// <summary>
        /// Gets or Sets IsExpirationWarningSent24Hour
        /// </summary>
        [DataMember(Name="IsExpirationWarningSent24Hour", EmitDefaultValue=false)]
        public bool? IsExpirationWarningSent24Hour { get; set; }
        /// <summary>
        /// Gets or Sets ForeignKey
        /// </summary>
        [DataMember(Name="ForeignKey", EmitDefaultValue=false)]
        public string ForeignKey { get; set; }
        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="Created", EmitDefaultValue=false)]
        public DateTime? Created { get; set; }
        /// <summary>
        /// Gets or Sets LastAccessedTimeStamp
        /// </summary>
        [DataMember(Name="LastAccessedTimeStamp", EmitDefaultValue=false)]
        public DateTime? LastAccessedTimeStamp { get; set; }
        /// <summary>
        /// Gets or Sets PartitionKey
        /// </summary>
        [DataMember(Name="PartitionKey", EmitDefaultValue=false)]
        public string PartitionKey { get; set; }
        /// <summary>
        /// Gets or Sets RowKey
        /// </summary>
        [DataMember(Name="RowKey", EmitDefaultValue=false)]
        public string RowKey { get; set; }
        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="Timestamp", EmitDefaultValue=false)]
        public DateTime? Timestamp { get; set; }
        /// <summary>
        /// Gets or Sets ETag
        /// </summary>
        [DataMember(Name="ETag", EmitDefaultValue=false)]
        public string ETag { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaseSubscription {\n");
            sb.Append("  RenewalDate: ").Append(RenewalDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  BillingPeriod: ").Append(BillingPeriod).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  RenewalFee: ").Append(RenewalFee).Append("\n");
            sb.Append("  CaseLimit: ").Append(CaseLimit).Append("\n");
            sb.Append("  DocumentLimit: ").Append(DocumentLimit).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  IsExpirationWarningSent24Hour: ").Append(IsExpirationWarningSent24Hour).Append("\n");
            sb.Append("  ForeignKey: ").Append(ForeignKey).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  LastAccessedTimeStamp: ").Append(LastAccessedTimeStamp).Append("\n");
            sb.Append("  PartitionKey: ").Append(PartitionKey).Append("\n");
            sb.Append("  RowKey: ").Append(RowKey).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  ETag: ").Append(ETag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as BaseSubscription);
        }

        /// <summary>
        /// Returns true if BaseSubscription instances are equal
        /// </summary>
        /// <param name="other">Instance of BaseSubscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaseSubscription other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.RenewalDate == other.RenewalDate ||
                    this.RenewalDate != null &&
                    this.RenewalDate.Equals(other.RenewalDate)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.BillingPeriod == other.BillingPeriod ||
                    this.BillingPeriod != null &&
                    this.BillingPeriod.Equals(other.BillingPeriod)
                ) && 
                (
                    this.Type == other.Type ||
                    this.Type != null &&
                    this.Type.Equals(other.Type)
                ) && 
                (
                    this.RenewalFee == other.RenewalFee ||
                    this.RenewalFee != null &&
                    this.RenewalFee.Equals(other.RenewalFee)
                ) && 
                (
                    this.CaseLimit == other.CaseLimit ||
                    this.CaseLimit != null &&
                    this.CaseLimit.Equals(other.CaseLimit)
                ) && 
                (
                    this.DocumentLimit == other.DocumentLimit ||
                    this.DocumentLimit != null &&
                    this.DocumentLimit.Equals(other.DocumentLimit)
                ) && 
                (
                    this.CurrencyCode == other.CurrencyCode ||
                    this.CurrencyCode != null &&
                    this.CurrencyCode.Equals(other.CurrencyCode)
                ) && 
                (
                    this.IsExpirationWarningSent24Hour == other.IsExpirationWarningSent24Hour ||
                    this.IsExpirationWarningSent24Hour != null &&
                    this.IsExpirationWarningSent24Hour.Equals(other.IsExpirationWarningSent24Hour)
                ) && 
                (
                    this.ForeignKey == other.ForeignKey ||
                    this.ForeignKey != null &&
                    this.ForeignKey.Equals(other.ForeignKey)
                ) && 
                (
                    this.Created == other.Created ||
                    this.Created != null &&
                    this.Created.Equals(other.Created)
                ) && 
                (
                    this.LastAccessedTimeStamp == other.LastAccessedTimeStamp ||
                    this.LastAccessedTimeStamp != null &&
                    this.LastAccessedTimeStamp.Equals(other.LastAccessedTimeStamp)
                ) && 
                (
                    this.PartitionKey == other.PartitionKey ||
                    this.PartitionKey != null &&
                    this.PartitionKey.Equals(other.PartitionKey)
                ) && 
                (
                    this.RowKey == other.RowKey ||
                    this.RowKey != null &&
                    this.RowKey.Equals(other.RowKey)
                ) && 
                (
                    this.Timestamp == other.Timestamp ||
                    this.Timestamp != null &&
                    this.Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    this.ETag == other.ETag ||
                    this.ETag != null &&
                    this.ETag.Equals(other.ETag)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.RenewalDate != null)
                    hash = hash * 59 + this.RenewalDate.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.BillingPeriod != null)
                    hash = hash * 59 + this.BillingPeriod.GetHashCode();
                if (this.Type != null)
                    hash = hash * 59 + this.Type.GetHashCode();
                if (this.RenewalFee != null)
                    hash = hash * 59 + this.RenewalFee.GetHashCode();
                if (this.CaseLimit != null)
                    hash = hash * 59 + this.CaseLimit.GetHashCode();
                if (this.DocumentLimit != null)
                    hash = hash * 59 + this.DocumentLimit.GetHashCode();
                if (this.CurrencyCode != null)
                    hash = hash * 59 + this.CurrencyCode.GetHashCode();
                if (this.IsExpirationWarningSent24Hour != null)
                    hash = hash * 59 + this.IsExpirationWarningSent24Hour.GetHashCode();
                if (this.ForeignKey != null)
                    hash = hash * 59 + this.ForeignKey.GetHashCode();
                if (this.Created != null)
                    hash = hash * 59 + this.Created.GetHashCode();
                if (this.LastAccessedTimeStamp != null)
                    hash = hash * 59 + this.LastAccessedTimeStamp.GetHashCode();
                if (this.PartitionKey != null)
                    hash = hash * 59 + this.PartitionKey.GetHashCode();
                if (this.RowKey != null)
                    hash = hash * 59 + this.RowKey.GetHashCode();
                if (this.Timestamp != null)
                    hash = hash * 59 + this.Timestamp.GetHashCode();
                if (this.ETag != null)
                    hash = hash * 59 + this.ETag.GetHashCode();
                return hash;
            }
        }
    }

}
