/* 
 * Bundledocs.Web.Api
 *
 * Bundledocs Web Api (v1)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using Bundledocs.Client;
using Bundledocs.Model;
using RestSharp;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;

namespace Bundledocs.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBundlesApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="briefMigrationInvitationKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefMigrationInvitation</returns>
        OAuth2ApiResponseStrongBriefMigrationInvitation BundlesCancelBundleMigrationInvitation (string authorization, string partitionKey, string rowKey, string briefMigrationInvitationKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="briefMigrationInvitationKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefMigrationInvitation</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefMigrationInvitation> BundlesCancelBundleMigrationInvitationWithHttpInfo (string authorization, string partitionKey, string rowKey, string briefMigrationInvitationKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefBean</returns>
        OAuth2ApiResponseStrongBriefBean BundlesCopyBundle (string authorization, string partitionKey, string rowKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefBean</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefBean> BundlesCopyBundleWithHttpInfo (string authorization, string partitionKey, string rowKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        OAuth2ApiResponseStrongBriefDocument BundlesCreateBriefIntroDocument (string authorization, string partitionKey, string rowKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefDocument> BundlesCreateBriefIntroDocumentWithHttpInfo (string authorization, string partitionKey, string rowKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        OAuth2ApiResponseStrongBriefDocument BundlesCreateBriefTitleDocument (string authorization, string partitionKey, string rowKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefDocument> BundlesCreateBriefTitleDocumentWithHttpInfo (string authorization, string partitionKey, string rowKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        OAuth2ApiResponseStrongBriefDocument BundlesCreateBriefWatermarkImage (string authorization, string partitionKey, string rowKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefDocument> BundlesCreateBriefWatermarkImageWithHttpInfo (string authorization, string partitionKey, string rowKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="createBriefBean"></param>
        /// <returns>OAuth2ApiResponseStrongBriefBean</returns>
        OAuth2ApiResponseStrongBriefBean BundlesCreateBundle (string authorization, BriefBean createBriefBean);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="createBriefBean"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefBean</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefBean> BundlesCreateBundleWithHttpInfo (string authorization, BriefBean createBriefBean);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        OAuth2ApiResponseStrongBriefDocument BundlesDeleteBriefIntroDocument (string authorization, string partitionKey, string rowKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefDocument> BundlesDeleteBriefIntroDocumentWithHttpInfo (string authorization, string partitionKey, string rowKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        OAuth2ApiResponseStrongBriefDocument BundlesDeleteBriefTitleDocument (string authorization, string partitionKey, string rowKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefDocument> BundlesDeleteBriefTitleDocumentWithHttpInfo (string authorization, string partitionKey, string rowKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        OAuth2ApiResponseStrongBriefDocument BundlesDeleteBriefWatermarkImage (string authorization, string partitionKey, string rowKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefDocument> BundlesDeleteBriefWatermarkImageWithHttpInfo (string authorization, string partitionKey, string rowKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefBean</returns>
        OAuth2ApiResponseStrongBriefBean BundlesDeleteBundle (string authorization, string partitionKey, string rowKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefBean</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefBean> BundlesDeleteBundleWithHttpInfo (string authorization, string partitionKey, string rowKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns></returns>
        Stream BundlesDownloadBundle (string authorization, string partitionKey, string rowKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> BundlesDownloadBundleWithHttpInfo (string authorization, string partitionKey, string rowKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="generateBriefBean"></param>
        /// <returns>OAuth2ApiResponseStrongBrief</returns>
        OAuth2ApiResponseStrongOAuthApiMessage BundlesGenerateBundle (string authorization, string partitionKey, string rowKey, BriefBean generateBriefBean);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="generateBriefBean"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBrief</returns>
        ApiResponse<OAuth2ApiResponseStrongOAuthApiMessage> BundlesGenerateBundleWithHttpInfo (string authorization, string partitionKey, string rowKey, BriefBean generateBriefBean);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongListBriefReceipt</returns>
        OAuth2ApiResponseStrongListBriefReceipt BundlesGetAllBriefReceipts (string authorization, string partitionKey, string rowKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongListBriefReceipt</returns>
        ApiResponse<OAuth2ApiResponseStrongListBriefReceipt> BundlesGetAllBriefReceiptsWithHttpInfo (string authorization, string partitionKey, string rowKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongListBriefDocument</returns>
        OAuth2ApiResponseStrongListBriefDocument BundlesGetBriefDocumentIndexDataTree (string authorization, string partitionKey, string rowKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongListBriefDocument</returns>
        ApiResponse<OAuth2ApiResponseStrongListBriefDocument> BundlesGetBriefDocumentIndexDataTreeWithHttpInfo (string authorization, string partitionKey, string rowKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocumentBean</returns>
        OAuth2ApiResponseStrongBriefDocumentBean BundlesGetBriefIntroDocument (string authorization, string partitionKey, string rowKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocumentBean</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefDocumentBean> BundlesGetBriefIntroDocumentWithHttpInfo (string authorization, string partitionKey, string rowKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocumentBean</returns>
        OAuth2ApiResponseStrongBriefDocumentBean BundlesGetBriefTitleDocument (string authorization, string partitionKey, string rowKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocumentBean</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefDocumentBean> BundlesGetBriefTitleDocumentWithHttpInfo (string authorization, string partitionKey, string rowKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocumentBean</returns>
        OAuth2ApiResponseStrongBriefDocumentBean BundlesGetBriefWatermarkImage (string authorization, string partitionKey, string rowKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocumentBean</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefDocumentBean> BundlesGetBriefWatermarkImageWithHttpInfo (string authorization, string partitionKey, string rowKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongListBriefMigrationInvitation</returns>
        OAuth2ApiResponseStrongListBriefMigrationInvitation BundlesGetBundleMigrations (string authorization, string partitionKey, string rowKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongListBriefMigrationInvitation</returns>
        ApiResponse<OAuth2ApiResponseStrongListBriefMigrationInvitation> BundlesGetBundleMigrationsWithHttpInfo (string authorization, string partitionKey, string rowKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongListBriefShare</returns>
        OAuth2ApiResponseStrongListBriefShare BundlesGetBundleShares (string authorization, string partitionKey, string rowKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongListBriefShare</returns>
        ApiResponse<OAuth2ApiResponseStrongListBriefShare> BundlesGetBundleSharesWithHttpInfo (string authorization, string partitionKey, string rowKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefBean</returns>
        OAuth2ApiResponseStrongBriefBean BundlesLoadBundle (string authorization, string partitionKey, string rowKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefBean</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefBean> BundlesLoadBundleWithHttpInfo (string authorization, string partitionKey, string rowKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="emailAddressBean"></param>
        /// <returns>OAuth2ApiResponseStrongBriefMigrationInvitation</returns>
        OAuth2ApiResponseStrongBriefMigrationInvitation BundlesSendBundleMigrationsInvitation (string authorization, string partitionKey, string rowKey, EmailAddressBean emailAddressBean);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="emailAddressBean"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefMigrationInvitation</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefMigrationInvitation> BundlesSendBundleMigrationsInvitationWithHttpInfo (string authorization, string partitionKey, string rowKey, EmailAddressBean emailAddressBean);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="emailAddressBean"></param>
        /// <returns>OAuth2ApiResponseStrongBriefShare</returns>
        OAuth2ApiResponseStrongBriefShare BundlesShareBundle (string authorization, string partitionKey, string rowKey, EmailAddressBean emailAddressBean);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="emailAddressBean"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefShare</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefShare> BundlesShareBundleWithHttpInfo (string authorization, string partitionKey, string rowKey, EmailAddressBean emailAddressBean);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="briefShareKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefShare</returns>
        OAuth2ApiResponseStrongBriefShare BundlesUnshareBundle (string authorization, string partitionKey, string rowKey, string briefShareKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="briefShareKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefShare</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefShare> BundlesUnshareBundleWithHttpInfo (string authorization, string partitionKey, string rowKey, string briefShareKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="updateBeans"></param>
        /// <returns>OAuth2ApiResponseStrongListBriefDocument</returns>
        OAuth2ApiResponseStrongListBriefDocument BundlesUpdateBriefDocumentDisplayOrder (string authorization, string partitionKey, string rowKey, List<BriefDocumentDisplayOrderUpdateBean> updateBeans);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="updateBeans"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongListBriefDocument</returns>
        ApiResponse<OAuth2ApiResponseStrongListBriefDocument> BundlesUpdateBriefDocumentDisplayOrderWithHttpInfo (string authorization, string partitionKey, string rowKey, List<BriefDocumentDisplayOrderUpdateBean> updateBeans);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="updateBriefBean"></param>
        /// <returns>OAuth2ApiResponseStrongBriefBean</returns>
        OAuth2ApiResponseStrongBriefBean BundlesUpdateBundle (string authorization, string partitionKey, string rowKey, BriefBean updateBriefBean);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="updateBriefBean"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefBean</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefBean> BundlesUpdateBundleWithHttpInfo (string authorization, string partitionKey, string rowKey, BriefBean updateBriefBean);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BundlesApi : IBundlesApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BundlesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BundlesApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BundlesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BundlesApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="briefMigrationInvitationKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefMigrationInvitation</returns>
        public OAuth2ApiResponseStrongBriefMigrationInvitation BundlesCancelBundleMigrationInvitation (string authorization, string partitionKey, string rowKey, string briefMigrationInvitationKey)
        {
             ApiResponse<OAuth2ApiResponseStrongBriefMigrationInvitation> localVarResponse = BundlesCancelBundleMigrationInvitationWithHttpInfo(authorization, partitionKey, rowKey, briefMigrationInvitationKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="briefMigrationInvitationKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefMigrationInvitation</returns>
        public ApiResponse< OAuth2ApiResponseStrongBriefMigrationInvitation > BundlesCancelBundleMigrationInvitationWithHttpInfo (string authorization, string partitionKey, string rowKey, string briefMigrationInvitationKey)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesCancelBundleMigrationInvitation");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling BundlesApi->BundlesCancelBundleMigrationInvitation");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling BundlesApi->BundlesCancelBundleMigrationInvitation");
            // verify the required parameter 'briefMigrationInvitationKey' is set
            if (briefMigrationInvitationKey == null)
                throw new ApiException(400, "Missing required parameter 'briefMigrationInvitationKey' when calling BundlesApi->BundlesCancelBundleMigrationInvitation");

            var localVarPath = "/api/v1/bundles/{partitionKey}/{rowKey}/migrations/{briefMigrationInvitationKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (briefMigrationInvitationKey != null) localVarPathParams.Add("briefMigrationInvitationKey", Configuration.ApiClient.ParameterToString(briefMigrationInvitationKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesCancelBundleMigrationInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefMigrationInvitation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefMigrationInvitation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefMigrationInvitation)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefBean</returns>
        public OAuth2ApiResponseStrongBriefBean BundlesCopyBundle (string authorization, string partitionKey, string rowKey)
        {
             ApiResponse<OAuth2ApiResponseStrongBriefBean> localVarResponse = BundlesCopyBundleWithHttpInfo(authorization, partitionKey, rowKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefBean</returns>
        public ApiResponse< OAuth2ApiResponseStrongBriefBean > BundlesCopyBundleWithHttpInfo (string authorization, string partitionKey, string rowKey)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesCopyBundle");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling BundlesApi->BundlesCopyBundle");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling BundlesApi->BundlesCopyBundle");

            var localVarPath = "/api/v1/bundles/{partitionKey}/{rowKey}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesCopyBundle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefBean>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefBean) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefBean)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        public OAuth2ApiResponseStrongBriefDocument BundlesCreateBriefIntroDocument (string authorization, string partitionKey, string rowKey)
        {
             ApiResponse<OAuth2ApiResponseStrongBriefDocument> localVarResponse = BundlesCreateBriefIntroDocumentWithHttpInfo(authorization, partitionKey, rowKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        public ApiResponse< OAuth2ApiResponseStrongBriefDocument > BundlesCreateBriefIntroDocumentWithHttpInfo (string authorization, string partitionKey, string rowKey)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesCreateBriefIntroDocument");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling BundlesApi->BundlesCreateBriefIntroDocument");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling BundlesApi->BundlesCreateBriefIntroDocument");

            var localVarPath = "/api/v1/bundles/{partitionKey}/{rowKey}/intro";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesCreateBriefIntroDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefDocument) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefDocument)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        public OAuth2ApiResponseStrongBriefDocument BundlesCreateBriefTitleDocument (string authorization, string partitionKey, string rowKey)
        {
             ApiResponse<OAuth2ApiResponseStrongBriefDocument> localVarResponse = BundlesCreateBriefTitleDocumentWithHttpInfo(authorization, partitionKey, rowKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        public ApiResponse< OAuth2ApiResponseStrongBriefDocument > BundlesCreateBriefTitleDocumentWithHttpInfo (string authorization, string partitionKey, string rowKey)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesCreateBriefTitleDocument");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling BundlesApi->BundlesCreateBriefTitleDocument");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling BundlesApi->BundlesCreateBriefTitleDocument");

            var localVarPath = "/api/v1/bundles/{partitionKey}/{rowKey}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesCreateBriefTitleDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefDocument) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefDocument)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        public OAuth2ApiResponseStrongBriefDocument BundlesCreateBriefWatermarkImage (string authorization, string partitionKey, string rowKey)
        {
             ApiResponse<OAuth2ApiResponseStrongBriefDocument> localVarResponse = BundlesCreateBriefWatermarkImageWithHttpInfo(authorization, partitionKey, rowKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        public ApiResponse< OAuth2ApiResponseStrongBriefDocument > BundlesCreateBriefWatermarkImageWithHttpInfo (string authorization, string partitionKey, string rowKey)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesCreateBriefWatermarkImage");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling BundlesApi->BundlesCreateBriefWatermarkImage");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling BundlesApi->BundlesCreateBriefWatermarkImage");

            var localVarPath = "/api/v1/bundles/{partitionKey}/{rowKey}/watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesCreateBriefWatermarkImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefDocument) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefDocument)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="createBriefBean"></param>
        /// <returns>OAuth2ApiResponseStrongBriefBean</returns>
        public OAuth2ApiResponseStrongBriefBean BundlesCreateBundle (string authorization, BriefBean createBriefBean)
        {
             ApiResponse<OAuth2ApiResponseStrongBriefBean> localVarResponse = BundlesCreateBundleWithHttpInfo(authorization, createBriefBean);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="createBriefBean"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefBean</returns>
        public ApiResponse< OAuth2ApiResponseStrongBriefBean > BundlesCreateBundleWithHttpInfo (string authorization, BriefBean createBriefBean)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesCreateBundle");
            // verify the required parameter 'createBriefBean' is set
            if (createBriefBean == null)
                throw new ApiException(400, "Missing required parameter 'createBriefBean' when calling BundlesApi->BundlesCreateBundle");

            var localVarPath = "/api/v1/bundles";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "text/html"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (createBriefBean != null && createBriefBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createBriefBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createBriefBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesCreateBundle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefBean>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefBean) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefBean)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        public OAuth2ApiResponseStrongBriefDocument BundlesDeleteBriefIntroDocument (string authorization, string partitionKey, string rowKey)
        {
             ApiResponse<OAuth2ApiResponseStrongBriefDocument> localVarResponse = BundlesDeleteBriefIntroDocumentWithHttpInfo(authorization, partitionKey, rowKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        public ApiResponse< OAuth2ApiResponseStrongBriefDocument > BundlesDeleteBriefIntroDocumentWithHttpInfo (string authorization, string partitionKey, string rowKey)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesDeleteBriefIntroDocument");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling BundlesApi->BundlesDeleteBriefIntroDocument");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling BundlesApi->BundlesDeleteBriefIntroDocument");

            var localVarPath = "/api/v1/bundles/{partitionKey}/{rowKey}/intro";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesDeleteBriefIntroDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefDocument) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefDocument)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        public OAuth2ApiResponseStrongBriefDocument BundlesDeleteBriefTitleDocument (string authorization, string partitionKey, string rowKey)
        {
             ApiResponse<OAuth2ApiResponseStrongBriefDocument> localVarResponse = BundlesDeleteBriefTitleDocumentWithHttpInfo(authorization, partitionKey, rowKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        public ApiResponse< OAuth2ApiResponseStrongBriefDocument > BundlesDeleteBriefTitleDocumentWithHttpInfo (string authorization, string partitionKey, string rowKey)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesDeleteBriefTitleDocument");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling BundlesApi->BundlesDeleteBriefTitleDocument");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling BundlesApi->BundlesDeleteBriefTitleDocument");

            var localVarPath = "/api/v1/bundles/{partitionKey}/{rowKey}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesDeleteBriefTitleDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefDocument) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefDocument)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        public OAuth2ApiResponseStrongBriefDocument BundlesDeleteBriefWatermarkImage (string authorization, string partitionKey, string rowKey)
        {
             ApiResponse<OAuth2ApiResponseStrongBriefDocument> localVarResponse = BundlesDeleteBriefWatermarkImageWithHttpInfo(authorization, partitionKey, rowKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        public ApiResponse< OAuth2ApiResponseStrongBriefDocument > BundlesDeleteBriefWatermarkImageWithHttpInfo (string authorization, string partitionKey, string rowKey)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesDeleteBriefWatermarkImage");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling BundlesApi->BundlesDeleteBriefWatermarkImage");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling BundlesApi->BundlesDeleteBriefWatermarkImage");

            var localVarPath = "/api/v1/bundles/{partitionKey}/{rowKey}/watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesDeleteBriefWatermarkImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefDocument) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefDocument)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefBean</returns>
        public OAuth2ApiResponseStrongBriefBean BundlesDeleteBundle (string authorization, string partitionKey, string rowKey)
        {
             ApiResponse<OAuth2ApiResponseStrongBriefBean> localVarResponse = BundlesDeleteBundleWithHttpInfo(authorization, partitionKey, rowKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefBean</returns>
        public ApiResponse< OAuth2ApiResponseStrongBriefBean > BundlesDeleteBundleWithHttpInfo (string authorization, string partitionKey, string rowKey)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesDeleteBundle");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling BundlesApi->BundlesDeleteBundle");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling BundlesApi->BundlesDeleteBundle");

            var localVarPath = "/api/v1/bundles/{partitionKey}/{rowKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesDeleteBundle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefBean>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefBean) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefBean)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns></returns>
        public Stream BundlesDownloadBundle(string authorization, string partitionKey, string rowKey)
        {
            string url = string.Format("https://app.bundledocs.com/api/v1/bundles/{0}/{1}/download?Bearer={2}", partitionKey, rowKey, authorization.Split(' ')[1]);

            using (WebClient webClient = new WebClient())
            {
                return new MemoryStream(webClient.DownloadData(url));
            }
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> BundlesDownloadBundleWithHttpInfo (string authorization, string partitionKey, string rowKey)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesDownloadBundle");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling BundlesApi->BundlesDownloadBundle");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling BundlesApi->BundlesDownloadBundle");

            var localVarPath = "/api/v1/bundles/{partitionKey}/{rowKey}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesDownloadBundle", localVarResponse);
                if (exception != null) throw exception;
            }


            ApiResponse<Object> apiResource = new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
            return apiResource;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="generateBriefBean"></param>
        /// <returns>OAuth2ApiResponseStrongBrief</returns>
        public OAuth2ApiResponseStrongOAuthApiMessage BundlesGenerateBundle (string authorization, string partitionKey, string rowKey, BriefBean generateBriefBean)
        {
             ApiResponse<OAuth2ApiResponseStrongOAuthApiMessage> localVarResponse = BundlesGenerateBundleWithHttpInfo(authorization, partitionKey, rowKey, generateBriefBean);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="generateBriefBean"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBrief</returns>
        public ApiResponse<OAuth2ApiResponseStrongOAuthApiMessage> BundlesGenerateBundleWithHttpInfo (string authorization, string partitionKey, string rowKey, BriefBean generateBriefBean)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesGenerateBundle");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling BundlesApi->BundlesGenerateBundle");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling BundlesApi->BundlesGenerateBundle");
            // verify the required parameter 'generateBriefBean' is set
            if (generateBriefBean == null)
                throw new ApiException(400, "Missing required parameter 'generateBriefBean' when calling BundlesApi->BundlesGenerateBundle");

            var localVarPath = "/api/v1/bundles/{partitionKey}/{rowKey}/generate";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "text/html"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (generateBriefBean != null && generateBriefBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(generateBriefBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = generateBriefBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesGenerateBundle", localVarResponse);
                if (exception != null) throw exception;
            }

            ApiResponse <OAuth2ApiResponseStrongOAuthApiMessage> generatedBrief = new ApiResponse<OAuth2ApiResponseStrongOAuthApiMessage>(localVarStatusCode,
                                                        localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                                                        (OAuth2ApiResponseStrongOAuthApiMessage)Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongOAuthApiMessage)));

            return generatedBrief;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongListBriefReceipt</returns>
        public OAuth2ApiResponseStrongListBriefReceipt BundlesGetAllBriefReceipts (string authorization, string partitionKey, string rowKey)
        {
             ApiResponse<OAuth2ApiResponseStrongListBriefReceipt> localVarResponse = BundlesGetAllBriefReceiptsWithHttpInfo(authorization, partitionKey, rowKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongListBriefReceipt</returns>
        public ApiResponse< OAuth2ApiResponseStrongListBriefReceipt > BundlesGetAllBriefReceiptsWithHttpInfo (string authorization, string partitionKey, string rowKey)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesGetAllBriefReceipts");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling BundlesApi->BundlesGetAllBriefReceipts");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling BundlesApi->BundlesGetAllBriefReceipts");

            var localVarPath = "/api/v1/bundles/{partitionKey}/{rowKey}/receipts";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesGetAllBriefReceipts", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongListBriefReceipt>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongListBriefReceipt) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongListBriefReceipt)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongListBriefDocument</returns>
        public OAuth2ApiResponseStrongListBriefDocument BundlesGetBriefDocumentIndexDataTree (string authorization, string partitionKey, string rowKey)
        {
             ApiResponse<OAuth2ApiResponseStrongListBriefDocument> localVarResponse = BundlesGetBriefDocumentIndexDataTreeWithHttpInfo(authorization, partitionKey, rowKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongListBriefDocument</returns>
        public ApiResponse< OAuth2ApiResponseStrongListBriefDocument > BundlesGetBriefDocumentIndexDataTreeWithHttpInfo (string authorization, string partitionKey, string rowKey)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesGetBriefDocumentIndexDataTree");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling BundlesApi->BundlesGetBriefDocumentIndexDataTree");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling BundlesApi->BundlesGetBriefDocumentIndexDataTree");

            var localVarPath = "/api/v1/bundles/{partitionKey}/{rowKey}/tree";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesGetBriefDocumentIndexDataTree", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongListBriefDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongListBriefDocument) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongListBriefDocument)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocumentBean</returns>
        public OAuth2ApiResponseStrongBriefDocumentBean BundlesGetBriefIntroDocument (string authorization, string partitionKey, string rowKey)
        {
             ApiResponse<OAuth2ApiResponseStrongBriefDocumentBean> localVarResponse = BundlesGetBriefIntroDocumentWithHttpInfo(authorization, partitionKey, rowKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocumentBean</returns>
        public ApiResponse< OAuth2ApiResponseStrongBriefDocumentBean > BundlesGetBriefIntroDocumentWithHttpInfo (string authorization, string partitionKey, string rowKey)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesGetBriefIntroDocument");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling BundlesApi->BundlesGetBriefIntroDocument");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling BundlesApi->BundlesGetBriefIntroDocument");

            var localVarPath = "/api/v1/bundles/{partitionKey}/{rowKey}/intro";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesGetBriefIntroDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefDocumentBean>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefDocumentBean) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefDocumentBean)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocumentBean</returns>
        public OAuth2ApiResponseStrongBriefDocumentBean BundlesGetBriefTitleDocument (string authorization, string partitionKey, string rowKey)
        {
             ApiResponse<OAuth2ApiResponseStrongBriefDocumentBean> localVarResponse = BundlesGetBriefTitleDocumentWithHttpInfo(authorization, partitionKey, rowKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocumentBean</returns>
        public ApiResponse< OAuth2ApiResponseStrongBriefDocumentBean > BundlesGetBriefTitleDocumentWithHttpInfo (string authorization, string partitionKey, string rowKey)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesGetBriefTitleDocument");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling BundlesApi->BundlesGetBriefTitleDocument");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling BundlesApi->BundlesGetBriefTitleDocument");

            var localVarPath = "/api/v1/bundles/{partitionKey}/{rowKey}/title";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesGetBriefTitleDocument", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefDocumentBean>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefDocumentBean) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefDocumentBean)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocumentBean</returns>
        public OAuth2ApiResponseStrongBriefDocumentBean BundlesGetBriefWatermarkImage (string authorization, string partitionKey, string rowKey)
        {
             ApiResponse<OAuth2ApiResponseStrongBriefDocumentBean> localVarResponse = BundlesGetBriefWatermarkImageWithHttpInfo(authorization, partitionKey, rowKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocumentBean</returns>
        public ApiResponse< OAuth2ApiResponseStrongBriefDocumentBean > BundlesGetBriefWatermarkImageWithHttpInfo (string authorization, string partitionKey, string rowKey)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesGetBriefWatermarkImage");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling BundlesApi->BundlesGetBriefWatermarkImage");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling BundlesApi->BundlesGetBriefWatermarkImage");

            var localVarPath = "/api/v1/bundles/{partitionKey}/{rowKey}/watermark";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesGetBriefWatermarkImage", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefDocumentBean>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefDocumentBean) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefDocumentBean)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongListBriefMigrationInvitation</returns>
        public OAuth2ApiResponseStrongListBriefMigrationInvitation BundlesGetBundleMigrations (string authorization, string partitionKey, string rowKey)
        {
             ApiResponse<OAuth2ApiResponseStrongListBriefMigrationInvitation> localVarResponse = BundlesGetBundleMigrationsWithHttpInfo(authorization, partitionKey, rowKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongListBriefMigrationInvitation</returns>
        public ApiResponse< OAuth2ApiResponseStrongListBriefMigrationInvitation > BundlesGetBundleMigrationsWithHttpInfo (string authorization, string partitionKey, string rowKey)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesGetBundleMigrations");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling BundlesApi->BundlesGetBundleMigrations");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling BundlesApi->BundlesGetBundleMigrations");

            var localVarPath = "/api/v1/bundles/{partitionKey}/{rowKey}/migrations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesGetBundleMigrations", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongListBriefMigrationInvitation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongListBriefMigrationInvitation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongListBriefMigrationInvitation)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongListBriefShare</returns>
        public OAuth2ApiResponseStrongListBriefShare BundlesGetBundleShares (string authorization, string partitionKey, string rowKey)
        {
             ApiResponse<OAuth2ApiResponseStrongListBriefShare> localVarResponse = BundlesGetBundleSharesWithHttpInfo(authorization, partitionKey, rowKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongListBriefShare</returns>
        public ApiResponse< OAuth2ApiResponseStrongListBriefShare > BundlesGetBundleSharesWithHttpInfo (string authorization, string partitionKey, string rowKey)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesGetBundleShares");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling BundlesApi->BundlesGetBundleShares");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling BundlesApi->BundlesGetBundleShares");

            var localVarPath = "/api/v1/bundles/{partitionKey}/{rowKey}/shares";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesGetBundleShares", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongListBriefShare>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongListBriefShare) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongListBriefShare)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefBean</returns>
        public OAuth2ApiResponseStrongBriefBean BundlesLoadBundle (string authorization, string partitionKey, string rowKey)
        {
             ApiResponse<OAuth2ApiResponseStrongBriefBean> localVarResponse = BundlesLoadBundleWithHttpInfo(authorization, partitionKey, rowKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefBean</returns>
        public ApiResponse< OAuth2ApiResponseStrongBriefBean > BundlesLoadBundleWithHttpInfo (string authorization, string partitionKey, string rowKey)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesLoadBundle");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling BundlesApi->BundlesLoadBundle");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling BundlesApi->BundlesLoadBundle");

            var localVarPath = "/api/v1/bundles/{partitionKey}/{rowKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesLoadBundle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefBean>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefBean) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefBean)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="emailAddressBean"></param>
        /// <returns>OAuth2ApiResponseStrongBriefMigrationInvitation</returns>
        public OAuth2ApiResponseStrongBriefMigrationInvitation BundlesSendBundleMigrationsInvitation (string authorization, string partitionKey, string rowKey, EmailAddressBean emailAddressBean)
        {
             ApiResponse<OAuth2ApiResponseStrongBriefMigrationInvitation> localVarResponse = BundlesSendBundleMigrationsInvitationWithHttpInfo(authorization, partitionKey, rowKey, emailAddressBean);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="emailAddressBean"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefMigrationInvitation</returns>
        public ApiResponse< OAuth2ApiResponseStrongBriefMigrationInvitation > BundlesSendBundleMigrationsInvitationWithHttpInfo (string authorization, string partitionKey, string rowKey, EmailAddressBean emailAddressBean)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesSendBundleMigrationsInvitation");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling BundlesApi->BundlesSendBundleMigrationsInvitation");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling BundlesApi->BundlesSendBundleMigrationsInvitation");
            // verify the required parameter 'emailAddressBean' is set
            if (emailAddressBean == null)
                throw new ApiException(400, "Missing required parameter 'emailAddressBean' when calling BundlesApi->BundlesSendBundleMigrationsInvitation");

            var localVarPath = "/api/v1/bundles/{partitionKey}/{rowKey}/migrations";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "text/html"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (emailAddressBean != null && emailAddressBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailAddressBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailAddressBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesSendBundleMigrationsInvitation", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefMigrationInvitation>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefMigrationInvitation) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefMigrationInvitation)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="emailAddressBean"></param>
        /// <returns>OAuth2ApiResponseStrongBriefShare</returns>
        public OAuth2ApiResponseStrongBriefShare BundlesShareBundle (string authorization, string partitionKey, string rowKey, EmailAddressBean emailAddressBean)
        {
             ApiResponse<OAuth2ApiResponseStrongBriefShare> localVarResponse = BundlesShareBundleWithHttpInfo(authorization, partitionKey, rowKey, emailAddressBean);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="emailAddressBean"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefShare</returns>
        public ApiResponse< OAuth2ApiResponseStrongBriefShare > BundlesShareBundleWithHttpInfo (string authorization, string partitionKey, string rowKey, EmailAddressBean emailAddressBean)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesShareBundle");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling BundlesApi->BundlesShareBundle");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling BundlesApi->BundlesShareBundle");
            // verify the required parameter 'emailAddressBean' is set
            if (emailAddressBean == null)
                throw new ApiException(400, "Missing required parameter 'emailAddressBean' when calling BundlesApi->BundlesShareBundle");

            var localVarPath = "/api/v1/bundles/{partitionKey}/{rowKey}/shares";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "text/html"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (emailAddressBean != null && emailAddressBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(emailAddressBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = emailAddressBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesShareBundle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefShare>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefShare) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefShare)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="briefShareKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefShare</returns>
        public OAuth2ApiResponseStrongBriefShare BundlesUnshareBundle (string authorization, string partitionKey, string rowKey, string briefShareKey)
        {
             ApiResponse<OAuth2ApiResponseStrongBriefShare> localVarResponse = BundlesUnshareBundleWithHttpInfo(authorization, partitionKey, rowKey, briefShareKey);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="briefShareKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefShare</returns>
        public ApiResponse< OAuth2ApiResponseStrongBriefShare > BundlesUnshareBundleWithHttpInfo (string authorization, string partitionKey, string rowKey, string briefShareKey)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesUnshareBundle");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling BundlesApi->BundlesUnshareBundle");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling BundlesApi->BundlesUnshareBundle");
            // verify the required parameter 'briefShareKey' is set
            if (briefShareKey == null)
                throw new ApiException(400, "Missing required parameter 'briefShareKey' when calling BundlesApi->BundlesUnshareBundle");

            var localVarPath = "/api/v1/bundles/{partitionKey}/{rowKey}/shares/{briefShareKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (briefShareKey != null) localVarPathParams.Add("briefShareKey", Configuration.ApiClient.ParameterToString(briefShareKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesUnshareBundle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefShare>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefShare) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefShare)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="updateBeans"></param>
        /// <returns>OAuth2ApiResponseStrongListBriefDocument</returns>
        public OAuth2ApiResponseStrongListBriefDocument BundlesUpdateBriefDocumentDisplayOrder (string authorization, string partitionKey, string rowKey, List<BriefDocumentDisplayOrderUpdateBean> updateBeans)
        {
             ApiResponse<OAuth2ApiResponseStrongListBriefDocument> localVarResponse = BundlesUpdateBriefDocumentDisplayOrderWithHttpInfo(authorization, partitionKey, rowKey, updateBeans);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="updateBeans"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongListBriefDocument</returns>
        public ApiResponse< OAuth2ApiResponseStrongListBriefDocument > BundlesUpdateBriefDocumentDisplayOrderWithHttpInfo (string authorization, string partitionKey, string rowKey, List<BriefDocumentDisplayOrderUpdateBean> updateBeans)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesUpdateBriefDocumentDisplayOrder");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling BundlesApi->BundlesUpdateBriefDocumentDisplayOrder");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling BundlesApi->BundlesUpdateBriefDocumentDisplayOrder");
            // verify the required parameter 'updateBeans' is set
            if (updateBeans == null)
                throw new ApiException(400, "Missing required parameter 'updateBeans' when calling BundlesApi->BundlesUpdateBriefDocumentDisplayOrder");

            var localVarPath = "/api/v1/bundles/{partitionKey}/{rowKey}/tree";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "text/html"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (updateBeans != null && updateBeans.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateBeans); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateBeans; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesUpdateBriefDocumentDisplayOrder", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongListBriefDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongListBriefDocument) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongListBriefDocument)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="updateBriefBean"></param>
        /// <returns>OAuth2ApiResponseStrongBriefBean</returns>
        public OAuth2ApiResponseStrongBriefBean BundlesUpdateBundle (string authorization, string partitionKey, string rowKey, BriefBean updateBriefBean)
        {
             ApiResponse<OAuth2ApiResponseStrongBriefBean> localVarResponse = BundlesUpdateBundleWithHttpInfo(authorization, partitionKey, rowKey, updateBriefBean);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="updateBriefBean"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefBean</returns>
        public ApiResponse< OAuth2ApiResponseStrongBriefBean > BundlesUpdateBundleWithHttpInfo (string authorization, string partitionKey, string rowKey, BriefBean updateBriefBean)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling BundlesApi->BundlesUpdateBundle");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling BundlesApi->BundlesUpdateBundle");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling BundlesApi->BundlesUpdateBundle");
            // verify the required parameter 'updateBriefBean' is set
            if (updateBriefBean == null)
                throw new ApiException(400, "Missing required parameter 'updateBriefBean' when calling BundlesApi->BundlesUpdateBundle");

            var localVarPath = "/api/v1/bundles/{partitionKey}/{rowKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded", 
                "text/html"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (updateBriefBean != null && updateBriefBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateBriefBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateBriefBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("BundlesUpdateBundle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefBean>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefBean) Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefBean)));
            
        }

    }
}
