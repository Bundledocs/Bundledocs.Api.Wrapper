/* 
 * Bundledocs.Web.Api
 *
 * Bundledocs Web Api (v1)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using Bundledocs.Client;
using Bundledocs.Model;
using RestSharp;
using RestSharp.Extensions;
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;

namespace Bundledocs.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDocumentsApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="createBlankDocumentBean"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        OAuth2ApiResponseStrongBriefDocument DocumentsBlank(string authorization, CreateBlankDocumentsBean createBlankDocumentBean);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="createBlankDocumentBean"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefDocument> DocumentsBlankWithHttpInfo(string authorization, CreateBlankDocumentsBean createBlankDocumentBean);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        OAuth2ApiResponseStrongBriefDocument DocumentsCopy(string authorization, string partitionKey, string rowKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefDocument> DocumentsCopyWithHttpInfo(string authorization, string partitionKey, string rowKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        OAuth2ApiResponseStrongBriefDocument DocumentsCreate(string authorization);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefDocument> DocumentsCreateWithHttpInfo(string authorization);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        OAuth2ApiResponseStrongBriefDocument DocumentsDelete(string authorization, string partitionKey, string rowKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefDocument> DocumentsDeleteWithHttpInfo(string authorization, string partitionKey, string rowKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns></returns>
        Stream DocumentsDownload(string authorization, string partitionKey, string rowKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DocumentsDownloadWithHttpInfo(string authorization, string partitionKey, string rowKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="mergeBriefDocumentsBean"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        OAuth2ApiResponseStrongBriefDocument DocumentsMerge(string authorization, string partitionKey, string rowKey, BriefDocumentBulkActionsBean mergeBriefDocumentsBean);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="mergeBriefDocumentsBean"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefDocument> DocumentsMergeWithHttpInfo(string authorization, string partitionKey, string rowKey, BriefDocumentBulkActionsBean mergeBriefDocumentsBean);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="createBriefDocumentsBean"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        OAuth2ApiResponseStrongBriefDocument DocumentsRemote(string authorization, CreateBriefDocumentsBeanExternalCreateDocumentBean createBriefDocumentsBean);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="createBriefDocumentsBean"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefDocument> DocumentsRemoteWithHttpInfo(string authorization, CreateBriefDocumentsBeanExternalCreateDocumentBean createBriefDocumentsBean);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        OAuth2ApiResponseStrongBriefDocument DocumentsReplace(string authorization, string partitionKey, string rowKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefDocument> DocumentsReplaceWithHttpInfo(string authorization, string partitionKey, string rowKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        OAuth2ApiResponseStrongBriefDocument DocumentsToggleIncluded(string authorization, string partitionKey, string rowKey);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefDocument> DocumentsToggleIncludedWithHttpInfo(string authorization, string partitionKey, string rowKey);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="updateBriefDocumentBean"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        OAuth2ApiResponseStrongBriefDocument DocumentsUpdate(string authorization, string partitionKey, string rowKey, BriefDocumentBean updateBriefDocumentBean);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="updateBriefDocumentBean"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        ApiResponse<OAuth2ApiResponseStrongBriefDocument> DocumentsUpdateWithHttpInfo(string authorization, string partitionKey, string rowKey, BriefDocumentBean updateBriefDocumentBean);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DocumentsApi : IDocumentsApi
    {
        private Bundledocs.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DocumentsApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Bundledocs.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DocumentsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DocumentsApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Bundledocs.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Bundledocs.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="createBlankDocumentBean"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        public OAuth2ApiResponseStrongBriefDocument DocumentsBlank(string authorization, CreateBlankDocumentsBean createBlankDocumentBean)
        {
            ApiResponse<OAuth2ApiResponseStrongBriefDocument> localVarResponse = DocumentsBlankWithHttpInfo(authorization, createBlankDocumentBean);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="createBlankDocumentBean"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        public ApiResponse<OAuth2ApiResponseStrongBriefDocument> DocumentsBlankWithHttpInfo(string authorization, CreateBlankDocumentsBean createBlankDocumentBean)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsBlank");
            // verify the required parameter 'createBlankDocumentBean' is set
            if (createBlankDocumentBean == null)
                throw new ApiException(400, "Missing required parameter 'createBlankDocumentBean' when calling DocumentsApi->DocumentsBlank");

            var localVarPath = "/api/v1/documents/blank";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
                "text/html"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (createBlankDocumentBean != null && createBlankDocumentBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createBlankDocumentBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createBlankDocumentBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsBlank", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefDocument)Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefDocument)));

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        public OAuth2ApiResponseStrongBriefDocument DocumentsCopy(string authorization, string partitionKey, string rowKey)
        {
            ApiResponse<OAuth2ApiResponseStrongBriefDocument> localVarResponse = DocumentsCopyWithHttpInfo(authorization, partitionKey, rowKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        public ApiResponse<OAuth2ApiResponseStrongBriefDocument> DocumentsCopyWithHttpInfo(string authorization, string partitionKey, string rowKey)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsCopy");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling DocumentsApi->DocumentsCopy");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling DocumentsApi->DocumentsCopy");

            var localVarPath = "/api/v1/documents/{partitionKey}/{rowKey}/copy";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCopy", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefDocument)Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefDocument)));

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        public OAuth2ApiResponseStrongBriefDocument DocumentsCreate(string authorization)
        {
            ApiResponse<OAuth2ApiResponseStrongBriefDocument> localVarResponse = DocumentsCreateWithHttpInfo(authorization);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        public ApiResponse<OAuth2ApiResponseStrongBriefDocument> DocumentsCreateWithHttpInfo(string authorization)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsCreate");

            var localVarPath = "/api/v1/documents";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsCreate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefDocument)Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefDocument)));

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        public OAuth2ApiResponseStrongBriefDocument DocumentsDelete(string authorization, string partitionKey, string rowKey)
        {
            ApiResponse<OAuth2ApiResponseStrongBriefDocument> localVarResponse = DocumentsDeleteWithHttpInfo(authorization, partitionKey, rowKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        public ApiResponse<OAuth2ApiResponseStrongBriefDocument> DocumentsDeleteWithHttpInfo(string authorization, string partitionKey, string rowKey)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsDelete");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling DocumentsApi->DocumentsDelete");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling DocumentsApi->DocumentsDelete");

            var localVarPath = "/api/v1/documents/{partitionKey}/{rowKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsDelete", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefDocument)Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefDocument)));

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns></returns>
        public Stream DocumentsDownload(string authorization, string partitionKey, string rowKey)
        {
            return DocumentDownloadFromApi(authorization, partitionKey, rowKey);
        }

        public Stream DocumentDownloadFromApi(string authorization, string partitionKey, string documentRowKey)
        {
            string url = string.Format("https://app.bundledocs.com/api/v1/documents/{0}/{1}/download?Bearer={2}", partitionKey, documentRowKey, authorization.Substring(authorization.IndexOf(' ') + 1));

            using (WebClient webClient = new WebClient())
            {
                return new MemoryStream(webClient.DownloadData(url));
            }           
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of Object(void)</returns>
        public ApiResponse<Object> DocumentsDownloadWithHttpInfo(string authorization, string partitionKey, string rowKey)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsDownload");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling DocumentsApi->DocumentsDownload");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling DocumentsApi->DocumentsDownload");

            var localVarPath = "/api/v1/documents/{partitionKey}/{rowKey}/download";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsDownload", localVarResponse);
                if (exception != null) throw exception;
            }


            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                null);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="mergeBriefDocumentsBean"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        public OAuth2ApiResponseStrongBriefDocument DocumentsMerge(string authorization, string partitionKey, string rowKey, BriefDocumentBulkActionsBean mergeBriefDocumentsBean)
        {
            ApiResponse<OAuth2ApiResponseStrongBriefDocument> localVarResponse = DocumentsMergeWithHttpInfo(authorization, partitionKey, rowKey, mergeBriefDocumentsBean);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="mergeBriefDocumentsBean"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        public ApiResponse<OAuth2ApiResponseStrongBriefDocument> DocumentsMergeWithHttpInfo(string authorization, string partitionKey, string rowKey, BriefDocumentBulkActionsBean mergeBriefDocumentsBean)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsMerge");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling DocumentsApi->DocumentsMerge");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling DocumentsApi->DocumentsMerge");
            // verify the required parameter 'mergeBriefDocumentsBean' is set
            if (mergeBriefDocumentsBean == null)
                throw new ApiException(400, "Missing required parameter 'mergeBriefDocumentsBean' when calling DocumentsApi->DocumentsMerge");

            var localVarPath = "/api/v1/documents/{partitionKey}/{rowKey}/merge";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
                "text/html"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (mergeBriefDocumentsBean != null && mergeBriefDocumentsBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(mergeBriefDocumentsBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = mergeBriefDocumentsBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsMerge", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefDocument)Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefDocument)));

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="createBriefDocumentsBean"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        public OAuth2ApiResponseStrongBriefDocument DocumentsRemote(string authorization, CreateBriefDocumentsBeanExternalCreateDocumentBean createBriefDocumentsBean)
        {
            ApiResponse<OAuth2ApiResponseStrongBriefDocument> localVarResponse = DocumentsRemoteWithHttpInfo(authorization, createBriefDocumentsBean);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="createBriefDocumentsBean"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        public ApiResponse<OAuth2ApiResponseStrongBriefDocument> DocumentsRemoteWithHttpInfo(string authorization, CreateBriefDocumentsBeanExternalCreateDocumentBean createBriefDocumentsBean)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsRemote");
            // verify the required parameter 'createBriefDocumentsBean' is set
            if (createBriefDocumentsBean == null)
                throw new ApiException(400, "Missing required parameter 'createBriefDocumentsBean' when calling DocumentsApi->DocumentsRemote");

            var localVarPath = "/api/v1/documents/remote";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
                "text/html"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (createBriefDocumentsBean != null && createBriefDocumentsBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(createBriefDocumentsBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = createBriefDocumentsBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsRemote", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefDocument)Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefDocument)));

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        public OAuth2ApiResponseStrongBriefDocument DocumentsReplace(string authorization, string partitionKey, string rowKey)
        {
            ApiResponse<OAuth2ApiResponseStrongBriefDocument> localVarResponse = DocumentsReplaceWithHttpInfo(authorization, partitionKey, rowKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        public ApiResponse<OAuth2ApiResponseStrongBriefDocument> DocumentsReplaceWithHttpInfo(string authorization, string partitionKey, string rowKey)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsReplace");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling DocumentsApi->DocumentsReplace");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling DocumentsApi->DocumentsReplace");

            var localVarPath = "/api/v1/documents/{partitionKey}/{rowKey}/replace";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsReplace", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefDocument)Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefDocument)));

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        public OAuth2ApiResponseStrongBriefDocument DocumentsToggleIncluded(string authorization, string partitionKey, string rowKey)
        {
            ApiResponse<OAuth2ApiResponseStrongBriefDocument> localVarResponse = DocumentsToggleIncludedWithHttpInfo(authorization, partitionKey, rowKey);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        public ApiResponse<OAuth2ApiResponseStrongBriefDocument> DocumentsToggleIncludedWithHttpInfo(string authorization, string partitionKey, string rowKey)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsToggleIncluded");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling DocumentsApi->DocumentsToggleIncluded");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling DocumentsApi->DocumentsToggleIncluded");

            var localVarPath = "/api/v1/documents/{partitionKey}/{rowKey}/toggle/included";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsToggleIncluded", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefDocument)Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefDocument)));

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="updateBriefDocumentBean"></param>
        /// <returns>OAuth2ApiResponseStrongBriefDocument</returns>
        public OAuth2ApiResponseStrongBriefDocument DocumentsUpdate(string authorization, string partitionKey, string rowKey, BriefDocumentBean updateBriefDocumentBean)
        {
            ApiResponse<OAuth2ApiResponseStrongBriefDocument> localVarResponse = DocumentsUpdateWithHttpInfo(authorization, partitionKey, rowKey, updateBriefDocumentBean);
            return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorization">Bearer AccessToken</param>
        /// <param name="partitionKey"></param>
        /// <param name="rowKey"></param>
        /// <param name="updateBriefDocumentBean"></param>
        /// <returns>ApiResponse of OAuth2ApiResponseStrongBriefDocument</returns>
        public ApiResponse<OAuth2ApiResponseStrongBriefDocument> DocumentsUpdateWithHttpInfo(string authorization, string partitionKey, string rowKey, BriefDocumentBean updateBriefDocumentBean)
        {
            // verify the required parameter 'authorization' is set
            if (authorization == null)
                throw new ApiException(400, "Missing required parameter 'authorization' when calling DocumentsApi->DocumentsUpdate");
            // verify the required parameter 'partitionKey' is set
            if (partitionKey == null)
                throw new ApiException(400, "Missing required parameter 'partitionKey' when calling DocumentsApi->DocumentsUpdate");
            // verify the required parameter 'rowKey' is set
            if (rowKey == null)
                throw new ApiException(400, "Missing required parameter 'rowKey' when calling DocumentsApi->DocumentsUpdate");
            // verify the required parameter 'updateBriefDocumentBean' is set
            if (updateBriefDocumentBean == null)
                throw new ApiException(400, "Missing required parameter 'updateBriefDocumentBean' when calling DocumentsApi->DocumentsUpdate");

            var localVarPath = "/api/v1/documents/{partitionKey}/{rowKey}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "application/x-www-form-urlencoded",
                "text/html"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/html"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (partitionKey != null) localVarPathParams.Add("partitionKey", Configuration.ApiClient.ParameterToString(partitionKey)); // path parameter
            if (rowKey != null) localVarPathParams.Add("rowKey", Configuration.ApiClient.ParameterToString(rowKey)); // path parameter
            if (authorization != null) localVarHeaderParams.Add("Authorization", Configuration.ApiClient.ParameterToString(authorization)); // header parameter
            if (updateBriefDocumentBean != null && updateBriefDocumentBean.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(updateBriefDocumentBean); // http body (model) parameter
            }
            else
            {
                localVarPostBody = updateBriefDocumentBean; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse)Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int)localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DocumentsUpdate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OAuth2ApiResponseStrongBriefDocument>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (OAuth2ApiResponseStrongBriefDocument)Configuration.ApiClient.Deserialize(localVarResponse, typeof(OAuth2ApiResponseStrongBriefDocument)));

        }


        public bool UploadTitlePageDocument(string authorization, NameValueCollection parameters, UploadFile uploadFile)
        {
            string uploadPath = string.Format("https://app.bundledocs.com/api/v1/bundles/{0}/{1}" + "/title", parameters["PartitionKey"], parameters["ParentRowKey"]);

            bool isSuccess = HttpUploadFile(authorization, uploadPath, uploadFile, parameters);
            return isSuccess;
        }

        public bool UploadDocument(string authorization, NameValueCollection parameters, UploadFile uploadFile)
        {
            string uploadPath = "https://app.bundledocs.com/api/v1/documents";

            bool isSuccess = HttpUploadFile(authorization, uploadPath, uploadFile, parameters);
            return isSuccess;
        }

        public static bool HttpUploadFile(string authorization, string url, UploadFile file, NameValueCollection nvc)
        {
            string logMessage = string.Empty;            
            var request = WebRequest.Create(url);
            bool isUploadSuccess = true;
            try
            {
                request.Method = WebRequestMethods.Http.Post;
                var boundary = "---------------------------" + DateTime.Now.Ticks.ToString("x", NumberFormatInfo.InvariantInfo);
                request.ContentType = "multipart/form-data; boundary=" + boundary;
                request.Headers["Authorization"] = authorization;
                boundary = "--" + boundary;

                Stream testRequestStream = request.GetRequestStream();

                using (var requestStream = request.GetRequestStream())
                {
                    // Write the values
                    foreach (string name in nvc.Keys)
                    {
                        var buffer = Encoding.ASCII.GetBytes(boundary + Environment.NewLine);
                        requestStream.Write(buffer, 0, buffer.Length);
                        buffer = Encoding.ASCII.GetBytes(string.Format("Content-Disposition: form-data; name=\"{0}\"{1}{1}", name, Environment.NewLine));
                        requestStream.Write(buffer, 0, buffer.Length);
                        buffer = Encoding.UTF8.GetBytes(nvc[name] + Environment.NewLine);
                        requestStream.Write(buffer, 0, buffer.Length);
                    }

                    // Write the files                    
                    var fileBuffer = Encoding.ASCII.GetBytes(boundary + Environment.NewLine);
                    requestStream.Write(fileBuffer, 0, fileBuffer.Length);
                    fileBuffer = Encoding.UTF8.GetBytes(string.Format("Content-Disposition: form-data; name=\"{0}\"; filename=\"{1}\"{2}", file.FileName, file.FileName, Environment.NewLine));
                    requestStream.Write(fileBuffer, 0, fileBuffer.Length);
                    fileBuffer = Encoding.ASCII.GetBytes(string.Format("Content-Type: {0}{1}{1}", file.ContentType, Environment.NewLine));
                    requestStream.Write(fileBuffer, 0, fileBuffer.Length);
                    file.Stream.CopyTo(requestStream);
                    fileBuffer = Encoding.ASCII.GetBytes(Environment.NewLine);
                    requestStream.Write(fileBuffer, 0, fileBuffer.Length);

                    var boundaryBuffer = Encoding.ASCII.GetBytes(boundary + "--");

                    foreach (string s in nvc.Keys)
                    {
                        string[] value = nvc.GetValues(s);
                        logMessage = s + " : " + value[0] + "\n";                        
                    }                    

                    requestStream.Write(boundaryBuffer, 0, boundaryBuffer.Length);
                }

                var resp = request.GetResponse();

                using (var response = request.GetResponse())
                using (var responseStream = response.GetResponseStream())
                using (var stream = new MemoryStream())
                {
                    responseStream.CopyTo(stream);
                }
            }
            catch (WebException ex)
            {
                logMessage = "Exception Msg : " + ex.Message + "\n";                
                logMessage = "Inner Exception : " + ex.InnerException + "\n";                
                logMessage = "Stack Trace : " + ex.StackTrace + "\n";                
                isUploadSuccess = false;
                WebResponse response = ex.Response;
                StreamReader reader = new StreamReader(response.GetResponseStream());
                string responseContent = reader.ReadToEnd();
                string readable = responseContent;
            }

            return isUploadSuccess;
        }

    }
}
